{"version":3,"sources":["../../src/observe/shadow-mutations.js"],"names":["nodeArray","queryShadowHosts","contextToElement","shadowObserverConfig","childList","subtree","ShadowMutationObserver","context","callback","config","disengage","bind","clientObserver","MutationObserver","hostObserver","mutations","forEach","handleHostMutation","observeContext","observeShadowHosts","disconnect","hosts","element","shadowRoot","observe","mutation","type","addedElements","addedNodes","filter","nodeType","Node","ELEMENT_NODE","TypeError","window","label","resolveDocument","defaultToDocument","service"],"mappings":";;;;;;AACA,OAAOA,SAAP,MAAsB,oBAAtB;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;;AAEA,IAAMC,uBAAuB;AAC3BC,aAAW,IADgB;AAE3BC,WAAS;AAFkB,CAA7B;;IAKMC,sB;AACJ,oCAA8C;AAAA;;AAAA,mFAAJ,EAAI;AAAA,QAAjCC,OAAiC,QAAjCA,OAAiC;AAAA,QAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,QAAdC,MAAc,QAAdA,MAAc;;AAAA;;AAC5C,SAAKA,MAAL,GAAcA,MAAd;;AAEA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;;AAEA,SAAKC,cAAL,GAAsB,IAAIC,gBAAJ,CAAqBL,QAArB,CAAtB;AACA,SAAKM,YAAL,GAAoB,IAAID,gBAAJ,CAAqB;AAAA,aAAaE,UAAUC,OAAV,CAAkB,MAAKC,kBAAvB,QAAb;AAAA,KAArB,CAApB;;AAEA,SAAKC,cAAL,CAAoBX,OAApB;AACA,SAAKY,kBAAL,CAAwBZ,OAAxB;AACD;;;;gCAEW;AACV,WAAKK,cAAL,IAAuB,KAAKA,cAAL,CAAoBQ,UAApB,EAAvB;AACA,WAAKR,cAAL,GAAsB,IAAtB;AACA,WAAKE,YAAL,IAAqB,KAAKA,YAAL,CAAkBM,UAAlB,EAArB;AACA,WAAKN,YAAL,GAAoB,IAApB;AACD;;;uCAEkBP,O,EAAS;AAAA;;AAC1B,UAAMc,QAAQpB,iBAAiB;AAC7BM;AAD6B,OAAjB,CAAd;;AAIAc,YAAML,OAAN,CAAc;AAAA,eAAW,OAAKE,cAAL,CAAoBI,QAAQC,UAA5B,CAAX;AAAA,OAAd;AACD;;;mCAEchB,O,EAAS;AACtB,WAAKK,cAAL,CAAoBY,OAApB,CAA4BjB,OAA5B,EAAqC,KAAKE,MAA1C;AACA,WAAKK,YAAL,CAAkBU,OAAlB,CAA0BjB,OAA1B,EAAmCJ,oBAAnC;AACD;;;uCAEkBsB,Q,EAAU;AAC3B,UAAIA,SAASC,IAAT,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AAED,UAAMC,gBAAgB3B,UAAUyB,SAASG,UAAnB,EAA+BC,MAA/B,CAAsC;AAAA,eAAWP,QAAQQ,QAAR,KAAqBC,KAAKC,YAArC;AAAA,OAAtC,CAAtB;AACAL,oBAAcX,OAAd,CAAsB,KAAKG,kBAA3B,EAA+C,IAA/C;AACD;;;;;;AAGH,eAAe,YAIP;AAAA,kFAAJ,EAAI;AAAA,MAHNZ,OAGM,SAHNA,OAGM;AAAA,MAFNC,QAEM,SAFNA,QAEM;AAAA,MADNC,MACM,SADNA,MACM;;AACN,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAIyB,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,MAAI,QAAOxB,MAAP,yCAAOA,MAAP,OAAkB,QAAtB,EAAgC;AAC9B,UAAM,IAAIwB,SAAJ,CAAc,kEAAd,CAAN;AACD;;AAED,MAAI,CAACC,OAAOrB,gBAAZ,EAA8B;AAC5B;AACA;AACA,WAAO;AACLH,iBAAW,qBAAW,CAAE;AADnB,KAAP;AAGD;;AAED,MAAMY,UAAUpB,iBAAiB;AAC/BiC,WAAO,0BADwB;AAE/BC,qBAAiB,IAFc;AAG/BC,uBAAmB,IAHY;AAI/B9B;AAJ+B,GAAjB,CAAhB;;AAOA,MAAM+B,UAAU,IAAIhC,sBAAJ,CAA2B;AACzCC,aAASe,OADgC;AAEzCd,sBAFyC;AAGzCC;AAHyC,GAA3B,CAAhB;;AAMA,SAAO;AACLC,eAAW4B,QAAQ5B;AADd,GAAP;AAGD","file":"shadow-mutations.js","sourcesContent":["\nimport nodeArray from '../util/node-array';\nimport queryShadowHosts from '../query/shadow-hosts';\nimport contextToElement from '../util/context-to-element';\n\nconst shadowObserverConfig = {\n  childList: true,\n  subtree: true,\n};\n\nclass ShadowMutationObserver {\n  constructor({context, callback, config} = {}) {\n    this.config = config;\n\n    this.disengage = this.disengage.bind(this);\n\n    this.clientObserver = new MutationObserver(callback);\n    this.hostObserver = new MutationObserver(mutations => mutations.forEach(this.handleHostMutation, this));\n\n    this.observeContext(context);\n    this.observeShadowHosts(context);\n  }\n\n  disengage() {\n    this.clientObserver && this.clientObserver.disconnect();\n    this.clientObserver = null;\n    this.hostObserver && this.hostObserver.disconnect();\n    this.hostObserver = null;\n  }\n\n  observeShadowHosts(context) {\n    const hosts = queryShadowHosts({\n      context,\n    });\n\n    hosts.forEach(element => this.observeContext(element.shadowRoot));\n  }\n\n  observeContext(context) {\n    this.clientObserver.observe(context, this.config);\n    this.hostObserver.observe(context, shadowObserverConfig);\n  }\n\n  handleHostMutation(mutation) {\n    if (mutation.type !== 'childList') {\n      return;\n    }\n\n    const addedElements = nodeArray(mutation.addedNodes).filter(element => element.nodeType === Node.ELEMENT_NODE);\n    addedElements.forEach(this.observeShadowHosts, this);\n  }\n}\n\nexport default function({\n  context,\n  callback,\n  config,\n} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('observe/shadow-mutations requires options.callback to be a function');\n  }\n\n  if (typeof config !== 'object') {\n    throw new TypeError('observe/shadow-mutations requires options.config to be an object');\n  }\n\n  if (!window.MutationObserver) {\n    // not supporting IE10 via Mutation Events, because they're too expensive\n    // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\n    return {\n      disengage: function() {},\n    };\n  }\n\n  const element = contextToElement({\n    label: 'observe/shadow-mutations',\n    resolveDocument: true,\n    defaultToDocument: true,\n    context,\n  });\n\n  const service = new ShadowMutationObserver({\n    context: element,\n    callback,\n    config,\n  });\n\n  return {\n    disengage: service.disengage,\n  };\n}\n"]}