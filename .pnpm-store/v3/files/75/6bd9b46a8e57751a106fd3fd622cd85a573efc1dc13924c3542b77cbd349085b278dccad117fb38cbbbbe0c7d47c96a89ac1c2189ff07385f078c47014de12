{"version":3,"sources":["../../src/query/first-tabbable.js"],"names":["context","sequence","strategy","ignoreAutofocus","defaultToContext","includeOnlyTabbable","index","document","body","length","hasAutofocus","hasNoPositiveTabindex","_isFocusable","rules","except","onlyTabbable","element","hasAttribute","tabIndex"],"mappings":";;;;;;;;;;;;;;;;;;;oBA0Be,YAOP;AAAA,mFAAJ,EAAI;AAAA,QANNA,OAMM,QANNA,OAMM;AAAA,QALNC,QAKM,QALNA,QAKM;AAAA,QAJNC,QAIM,QAJNA,QAIM;AAAA,QAHNC,eAGM,QAHNA,eAGM;AAAA,QAFNC,gBAEM,QAFNA,gBAEM;AAAA,QADNC,mBACM,QADNA,mBACM;;AACN,QAAIC,QAAQ,CAAC,CAAb;;AAEA,QAAI,CAACL,QAAL,EAAe;AACbD,gBAAU,yBAAUA,WAAWO,SAASC,IAA9B,EAAoC,CAApC,CAAV;AACAP,iBAAW,wBAAc;AACvBD,wBADuB;AAEvBK,gDAFuB;AAGvBH;AAHuB,OAAd,CAAX;AAKD;;AAED,QAAID,SAASQ,MAAT,IAAmB,CAACN,eAAxB,EAAyC;AACvC;AACAG,cAAQ,8BAAUL,QAAV,EAAoBS,YAApB,CAAR;AACD;;AAED,QAAIT,SAASQ,MAAT,IAAmBH,UAAU,CAAC,CAAlC,EAAqC;AACnC;AACAA,cAAQ,8BAAUL,QAAV,EAAoBU,qBAApB,CAAR;AACD;;AAED,QAAMC,eAAe,oBAAYC,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,oBAAcV;AAD8B,KAAzB,CAArB;;AAIA,QAAIC,UAAU,CAAC,CAAX,IAAgBF,gBAAhB,IAAoCJ,OAApC,IAA+CY,aAAaZ,OAAb,CAAnD,EAA0E;AACxE,aAAOA,OAAP;AACD;;AAED,WAAOC,SAASK,KAAT,KAAmB,IAA1B;AACD,G;;;;;;;;;;;;;;;;AA/DD;;;;;;;;;;;AAgBA,WAASI,YAAT,CAAsBM,OAAtB,EAA+B;AAC7B;AACA,WAAOA,QAAQC,YAAR,CAAqB,WAArB,CAAP;AACD;;AAED,WAASN,qBAAT,CAA+BK,OAA/B,EAAwC;AACtC,WAAOA,QAAQE,QAAR,IAAoB,CAA3B;AACD","file":"first-tabbable.js","sourcesContent":["\n/*\n    query/firstTabbable() finds the first suitable element to receive focus in the given context.\n    If an element has [autofocus] return that element, otherwise return the first element\n    in document order that does *not* have a positive tabIndex (e.g. as [tabindex=\"1\"]),\n    otherwise return the context itself, if it is focusable.\n\n    Note: Chrome's <dialog> will focus the first tabbable element, even if it has\n    [tabindex=\"1\"]. Since [tabindex=\"1\"] is considered\n    bad practice we'll ignore it until someone complains.\n */\n\nimport findIndex from '../util/array-find-index';\nimport queryTabbable from './tabbable';\nimport isFocusable from '../is/focusable';\nimport nodeArray from '../util/node-array';\n\nfunction hasAutofocus(element) {\n  // [autofocus] actually only works on form element, but who cares?\n  return element.hasAttribute('autofocus');\n}\n\nfunction hasNoPositiveTabindex(element) {\n  return element.tabIndex <= 0;\n}\n\nexport default function({\n  context,\n  sequence,\n  strategy,\n  ignoreAutofocus,\n  defaultToContext,\n  includeOnlyTabbable,\n} = {}) {\n  let index = -1;\n\n  if (!sequence) {\n    context = nodeArray(context || document.body)[0];\n    sequence = queryTabbable({\n      context,\n      includeOnlyTabbable,\n      strategy,\n    });\n  }\n\n  if (sequence.length && !ignoreAutofocus) {\n    // prefer [autofocus]\n    index = findIndex(sequence, hasAutofocus);\n  }\n\n  if (sequence.length && index === -1) {\n    // ignore positive [tabindex]\n    index = findIndex(sequence, hasNoPositiveTabindex);\n  }\n\n  const _isFocusable = isFocusable.rules.except({\n    onlyTabbable: includeOnlyTabbable,\n  });\n\n  if (index === -1 && defaultToContext && context && _isFocusable(context)) {\n    return context;\n  }\n\n  return sequence[index] || null;\n}\n"]}