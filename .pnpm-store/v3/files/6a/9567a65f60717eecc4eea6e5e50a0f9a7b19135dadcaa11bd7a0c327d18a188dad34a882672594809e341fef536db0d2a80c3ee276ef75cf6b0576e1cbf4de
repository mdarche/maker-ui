{"version":3,"sources":["../../src/element/disabled.js"],"names":["contextToElement","tabindexValue","isNativeDisabledSupported","toggleAttribute","toggleAttributeValue","logger","_supports","supports","disabledFocus","warn","disableTabindex","element","disabledState","tabIndex","attribute","temporaryValue","saveValue","disableVideoControls","remove","disableSvgFocusable","undefined","disableSvgLink","setAriaDisabled","disableScriptFocus","focus","disablePointerEvents","pointerEvents","style","setAttribute","getAttribute","removeAttribute","setElementDisabled","nodeName","toLowerCase","ownerSVGElement","focusSvgFocusableAttribute","focusSvgTabindexAttribute","context","label","Boolean","currentState","hasAttribute","runningAsGetter","arguments","length","disabled"],"mappings":"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","file":"disabled.js","sourcesContent":["\n/*\n  Utility to make any element inert (disabled). Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard - and thus not receive focus.\n\n  Elements made inert (disabled) by this utility are given the attribute [data-ally-disabled=\"true\"].\n\n  ---------------\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\n\nimport contextToElement from '../util/context-to-element';\nimport tabindexValue from '../util/tabindex-value';\nimport isNativeDisabledSupported from '../is/native-disabled-supported';\nimport toggleAttribute from '../util/toggle-attribute';\nimport toggleAttributeValue from '../util/toggle-attribute-value';\nimport logger from '../util/logger';\n\nimport _supports from '../supports/supports';\nlet supports;\n\nfunction disabledFocus() {\n  logger.warn('trying to focus inert element', this);\n}\n\nfunction disableTabindex(element, disabledState) {\n  if (disabledState) {\n    const tabIndex = tabindexValue(element);\n    toggleAttributeValue({\n      element,\n      attribute: 'tabindex',\n      temporaryValue: '-1',\n      saveValue: tabIndex !== null ? tabIndex : '',\n    });\n  } else {\n    toggleAttributeValue({\n      element,\n      attribute: 'tabindex',\n    });\n  }\n}\n\nfunction disableVideoControls(element, disabledState) {\n  toggleAttribute({\n    element,\n    attribute: 'controls',\n    remove: disabledState,\n  });\n}\n\nfunction disableSvgFocusable(element, disabledState) {\n  toggleAttributeValue({\n    element,\n    attribute: 'focusable',\n    temporaryValue: disabledState ? 'false' : undefined,\n  });\n}\n\nfunction disableSvgLink(element, disabledState) {\n  toggleAttribute({\n    element,\n    attribute: 'xlink:href',\n    remove: disabledState,\n  });\n}\n\nfunction setAriaDisabled(element, disabledState) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-disabled',\n    temporaryValue: disabledState ? 'true' : undefined,\n  });\n}\n\nfunction disableScriptFocus(element, disabledState) {\n  if (disabledState) {\n    // make sure no script can focus the element\n    element.focus = disabledFocus;\n  } else {\n    // restore original focus function from prototype\n    delete element.focus;\n  }\n}\n\nfunction disablePointerEvents(element, disabledState) {\n  if (disabledState) {\n    // remember previous pointer events status so we can restore it\n    const pointerEvents = element.style.pointerEvents || '';\n    element.setAttribute('data-inert-pointer-events', pointerEvents);\n    // make sure no pointer interaction can access the element\n    element.style.pointerEvents = 'none';\n  } else {\n    // restore to previous pointer interaction status\n    const pointerEvents = element.getAttribute('data-inert-pointer-events');\n    element.removeAttribute('data-inert-pointer-events');\n    element.style.pointerEvents = pointerEvents;\n  }\n}\n\nfunction setElementDisabled(element, disabledState) {\n  setAriaDisabled(element, disabledState);\n  disableTabindex(element, disabledState);\n  disableScriptFocus(element, disabledState);\n  disablePointerEvents(element, disabledState);\n\n  const nodeName = element.nodeName.toLowerCase();\n  if (nodeName === 'video' || nodeName === 'audio') {\n    // Blink and Gecko leave <video controls tabindex=\"-1\"> in document focus navigation sequence\n    // Blink leaves <audio controls tabindex=\"-1\"> in document focus navigation sequence\n    disableVideoControls(element, disabledState);\n  }\n\n  if (nodeName === 'svg' || element.ownerSVGElement) {\n    if (supports.focusSvgFocusableAttribute) {\n      // Internet Explorer knows focusable=\"false\" instead of tabindex=\"-1\"\n      disableSvgFocusable(element, disabledState);\n    } else if (!supports.focusSvgTabindexAttribute && nodeName === 'a') {\n      // Firefox neither knows focusable=\"false\" nor tabindex=\"-1\"\n      disableSvgLink(element, disabledState);\n    }\n  }\n\n  if (disabledState) {\n    element.setAttribute('data-ally-disabled', 'true');\n  } else {\n    element.removeAttribute('data-ally-disabled');\n  }\n}\n\nexport default function(context, disabledState) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  const element = contextToElement({\n    label: 'element/disabled',\n    context,\n  });\n\n  // accept truthy/falsy values\n  disabledState = Boolean(disabledState);\n  const currentState = element.hasAttribute('data-ally-disabled');\n  // if there's no value to set, we're running as a getter\n  const runningAsGetter = arguments.length === 1;\n\n  if (isNativeDisabledSupported(element)) {\n    if (runningAsGetter) {\n      return element.disabled;\n    }\n\n    // form elements know the disabled attribute, which we shall use instead of our poor man's copy of it\n    element.disabled = disabledState;\n    return element;\n  }\n\n  if (runningAsGetter) {\n    return currentState;\n  }\n\n  if (currentState === disabledState) {\n    // no update necessary\n    return element;\n  }\n\n  setElementDisabled(element, disabledState);\n  return element;\n}\n"]}