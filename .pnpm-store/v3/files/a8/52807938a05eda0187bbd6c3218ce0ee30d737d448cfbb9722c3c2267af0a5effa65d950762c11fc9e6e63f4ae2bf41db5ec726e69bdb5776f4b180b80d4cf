{"version":3,"sources":["../../src/fix/pointer-focus-children.js"],"names":["engage","disengage","relevantToCurrentBrowser","is","TRIDENT","IE10","IE11","handleBeforeFocusEvent","event","target","context","except","flexbox","scrollable","window","setImmediate","focus","reverse","map","call","children","element","visibility","style","transition","forEach","item","addEventListener","removeEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAIA,eAAJ,C,CAnBA;;;;;;;;;;;;;;;AAoBA,MAAIC,kBAAJ;AACA;AACA,MAAMC,2BAA2B,mBAASC,EAAT,CAAYC,OAAZ,KAAwB,mBAASD,EAAT,CAAYE,IAAZ,IAAoB,mBAASF,EAAT,CAAYG,IAAxD,CAAjC;;AAEA,MAAI,CAACJ,wBAAL,EAA+B;AAC7BF,aAAS,kBAAW,CAAE,CAAtB;AACD,GAFD,MAEO;AAAA;AACL,UAAMO,yBAAyB,SAAzBA,sBAAyB,CAASC,KAAT,EAAgB;AAC7C;AACA,YAAMC,SAAS,2BAAe;AAC5BC,mBAASF,MAAMC,MADa;AAE5BE,kBAAQ;AACNC,qBAAS,IADH;AAENC,wBAAY;AAFN;AAFoB,SAAf,CAAf;;AAQA,YAAI,CAACJ,MAAD,IAAWA,WAAWD,MAAMC,MAAhC,EAAwC;AACtC;AACA;AACD;;AAEDK,eAAOC,YAAP,CAAoB,YAAW;AAC7BN,iBAAOO,KAAP;AACD,SAFD;;AAIA;AACA;AACA;AACA;AACA;AACA,YAAMC,UAAU,GAAGC,GAAH,CAAOC,IAAP,CAAYV,OAAOW,QAAnB,EAA6B,UAASC,OAAT,EAAkB;AAC7D,cAAMC,aAAaD,QAAQE,KAAR,CAAcD,UAAd,IAA4B,EAA/C;AACA,cAAME,aAAaH,QAAQE,KAAR,CAAcC,UAAd,IAA4B,EAA/C;AACAH,kBAAQE,KAAR,CAAcD,UAAd,GAA2B,QAA3B;AACAD,kBAAQE,KAAR,CAAcC,UAAd,GAA2B,MAA3B;AACA,iBAAO,CAACH,OAAD,EAAUC,UAAV,EAAsBE,UAAtB,CAAP;AACD,SANe,CAAhB;;AAQA;AACAV,eAAOC,YAAP,CAAoB,YAAW;AAC7BE,kBAAQQ,OAAR,CAAgB,UAASC,IAAT,EAAe;AAC7BA,iBAAK,CAAL,EAAQH,KAAR,CAAcD,UAAd,GAA2BI,KAAK,CAAL,CAA3B;AACAA,iBAAK,CAAL,EAAQH,KAAR,CAAcC,UAAd,GAA2BE,KAAK,CAAL,CAA3B;AACD,WAHD;AAID,SALD;AAMD,OAvCD;;AAyCA1B,eAAS,gBAASqB,OAAT,EAAkB;AACzB;AACA;AACA;AACAA,gBAAQM,gBAAR,CAAyB,WAAzB,EAAsCpB,sBAAtC,EAA8D,IAA9D;AACD,OALD;;AAOAN,kBAAY,mBAASoB,OAAT,EAAkB;AAC5BA,gBAAQO,mBAAR,CAA4B,WAA5B,EAAyCrB,sBAAzC,EAAiE,IAAjE;AACD,OAFD;AAjDK;AAoDN;;oBAEc,+BAAgB,EAAEP,cAAF,EAAUC,oBAAV,EAAhB,C","file":"pointer-focus-children.js","sourcesContent":["/*\n  Children of focusable elements with display:flex are focusable.\n  Because focus can be given to focusable (not tabbable) elements\n  by mouse, we have to counter this behavior, so the correct element\n  becomes the activeElement (i.e. receives focus).\n\n  Example:\n    <div tabindex=\"-1\" style=\"display:flex\">\n      <span>I would receive focus</span>\n    </div>\n\n  This (wrong) behavior was observed in Internet Explorer 10 and 11.\n  It is fixed in IE12 (Win10 IE Tec Preview)\n*/\n\nimport getFocusTarget from '../get/focus-target';\nimport decorateContext from '../util/decorate-context';\nimport platform from '../util/platform';\n\nlet engage;\nlet disengage;\n// This fix is only relevant to IE10 (Trident/6) and IE11 (Trident/7)\nconst relevantToCurrentBrowser = platform.is.TRIDENT && (platform.is.IE10 || platform.is.IE11);\n\nif (!relevantToCurrentBrowser) {\n  engage = function() {};\n} else {\n  const handleBeforeFocusEvent = function(event) {\n    // find the element that would receive focus\n    const target = getFocusTarget({\n      context: event.target,\n      except: {\n        flexbox: true,\n        scrollable: true,\n      },\n    });\n\n    if (!target || target === event.target) {\n      // there's nothing to focus, or we're focusing the element clicked on\n      return;\n    }\n\n    window.setImmediate(function() {\n      target.focus();\n    });\n\n    // hide all children, because hidden elements can't get focus\n    // remember previous element style (not necessarily computed style)\n    // to undo hiding later. Reset transitions as well, in case visibility\n    // is to be transitioned. This will effectively kill all transitions\n    // that are executed on mousedown / :active\n    const reverse = [].map.call(target.children, function(element) {\n      const visibility = element.style.visibility || '';\n      const transition = element.style.transition || '';\n      element.style.visibility = 'hidden';\n      element.style.transition = 'none';\n      return [element, visibility, transition];\n    });\n\n    // add cleanup (undo hide) to the RunLoop\n    window.setImmediate(function() {\n      reverse.forEach(function(item) {\n        item[0].style.visibility = item[1];\n        item[0].style.transition = item[2];\n      });\n    });\n  };\n\n  engage = function(element) {\n    // WebDriver does not reliably dispatch PointerEvents so we'll go with\n    // mousedown, which shouldn't be a problem since we're targeting the\n    // focus handling which immediately follows mousedown.\n    element.addEventListener('mousedown', handleBeforeFocusEvent, true);\n  };\n\n  disengage = function(element) {\n    element.removeEventListener('mousedown', handleBeforeFocusEvent, true);\n  };\n}\n\nexport default decorateContext({ engage, disengage });\n"]}