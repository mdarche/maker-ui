{"version":3,"sources":["../../src/maintain/hidden.js"],"names":["context","filter","service","HiddenSubtree","disengage","makeElementHidden","element","attribute","temporaryValue","undoElementHidden","observerConfig","attributes","childList","subtree","_context","document","documentElement","_filter","bind","handleMutation","isInsignificantBranch","insignificantBranches","forEach","startObserver","call","querySelectorAll","_observer","disconnect","window","MutationObserver","mutations","observe","mutation","type","addedNodes","nodeType","Node","ELEMENT_NODE","parents","some","_element","getAttribute","isParentOfElement"],"mappings":";;;;;;;;;;;;;;;;;;;oBAoGe,YAAiC;AAAA,oFAAJ,EAAI;AAAA,QAAvBA,OAAuB,SAAvBA,OAAuB;AAAA,QAAdC,MAAc,SAAdA,MAAc;;AAC9C,QAAMC,UAAU,IAAIC,aAAJ,CAAkB,EAACH,gBAAD,EAAUC,cAAV,EAAlB,CAAhB;AACA,WAAO,EAAEG,WAAWF,QAAQE,SAArB,EAAP;AACD,G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9FD,WAASC,iBAAT,CAA2BC,OAA3B,EAAoC;AAClC,wCAAqB;AACnBA,sBADmB;AAEnBC,iBAAW,aAFQ;AAGnBC,sBAAgB;AAHG,KAArB;AAKD;;AAED,WAASC,iBAAT,CAA2BH,OAA3B,EAAoC;AAClC,wCAAqB;AACnBA,sBADmB;AAEnBC,iBAAW;AAFQ,KAArB;AAID;;AAED,MAAMG,iBAAiB;AACrBC,gBAAY,KADS;AAErBC,eAAW,IAFU;AAGrBC,aAAS;AAHY,GAAvB;;MAMMV,a;AACJ,6BAAoC;AAAA,qFAAJ,EAAI;AAAA,UAAvBH,OAAuB,QAAvBA,OAAuB;AAAA,UAAdC,MAAc,QAAdA,MAAc;;AAAA;;AAClC,WAAKa,QAAL,GAAgB,yBAAUd,WAAWe,SAASC,eAA9B,EAA+C,CAA/C,CAAhB;AACA,WAAKC,OAAL,GAAe,yBAAUhB,MAAV,CAAf;;AAEA,WAAKG,SAAL,GAAiB,KAAKA,SAAL,CAAec,IAAf,CAAoB,IAApB,CAAjB;AACA,WAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,WAAKE,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BF,IAA3B,CAAgC,IAAhC,CAA7B;;AAEA,UAAMG,wBAAwB,qCAAyB,EAACrB,SAAS,KAAKc,QAAf,EAAyBb,QAAQ,KAAKgB,OAAtC,EAAzB,CAA9B;AACAI,4BAAsBC,OAAtB,CAA8BjB,iBAA9B;AACA,WAAKkB,aAAL;AACD;;;;kCAEW;AACV,YAAI,CAAC,KAAKT,QAAV,EAAoB;AAClB;AACD;;AAED,WAAGQ,OAAH,CAAWE,IAAX,CAAgB,KAAKV,QAAL,CAAcW,gBAAd,CAA+B,2BAA/B,CAAhB,EAA6EhB,iBAA7E;;AAEA,aAAKK,QAAL,GAAgB,IAAhB;AACA,aAAKG,OAAL,GAAe,IAAf;AACA,aAAKS,SAAL,IAAkB,KAAKA,SAAL,CAAeC,UAAf,EAAlB;AACA,aAAKD,SAAL,GAAiB,IAAjB;AACD;;;sCAEe;AAAA;;AACd,YAAI,CAACE,OAAOC,gBAAZ,EAA8B;AAC5B;AACA;AACA;AACD;AACD;AACA;AACA,aAAKH,SAAL,GAAiB,IAAIG,gBAAJ,CAAqB;AAAA,iBAAaC,UAAUR,OAAV,CAAkB,MAAKH,cAAvB,CAAb;AAAA,SAArB,CAAjB;AACA,aAAKO,SAAL,CAAeK,OAAf,CAAuB,KAAKjB,QAA5B,EAAsCJ,cAAtC;AACD;;;qCAEcsB,Q,EAAU;AACvB,YAAIA,SAASC,IAAT,KAAkB,WAAtB,EAAmC;AACjC;AACA;AACA;AACA;AACA;AACA,mCAAUD,SAASE,UAAnB,EACGjC,MADH,CACU;AAAA,mBAAWK,QAAQ6B,QAAR,KAAqBC,KAAKC,YAArC;AAAA,WADV,EAEGpC,MAFH,CAEU,KAAKmB,qBAFf,EAGGE,OAHH,CAGWjB,iBAHX;AAID;AACF;;;4CAEqBC,O,EAAS;AAC7B,YAAMgC,UAAU,uBAAW,EAACtC,SAASM,OAAV,EAAX,CAAhB;AACA,YAAIgC,QAAQC,IAAR,CAAa;AAAA,iBAAYC,SAASC,YAAT,CAAsB,aAAtB,MAAyC,MAArD;AAAA,SAAb,CAAJ,EAA+E;AAC7E;AACA,iBAAO,KAAP;AACD;;AAED,YAAMC,oBAAoB,0CAAoB,EAACpC,gBAAD,EAApB,CAA1B;AACA,YAAI,KAAKW,OAAL,CAAasB,IAAb,CAAkBG,iBAAlB,CAAJ,EAA0C;AACxC;AACA,iBAAO,KAAP;AACD;;AAED,eAAO,IAAP;AACD","file":"hidden.js","sourcesContent":["\n// Utility to make the entire DOM aria-hidden=\"true\" except for a given set of elements\n\nimport nodeArray from '../util/node-array';\nimport getInsignificantBranches from '../get/insignificant-branches';\nimport getParents from '../get/parents';\nimport toggleAttributeValue from '../util/toggle-attribute-value';\nimport {getParentComparator} from '../util/compare-position';\n\nfunction makeElementHidden(element) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-hidden',\n    temporaryValue: 'true',\n  });\n}\n\nfunction undoElementHidden(element) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-hidden',\n  });\n}\n\nconst observerConfig = {\n  attributes: false,\n  childList: true,\n  subtree: true,\n};\n\nclass HiddenSubtree {\n  constructor({context, filter} = {}) {\n    this._context = nodeArray(context || document.documentElement)[0];\n    this._filter = nodeArray(filter);\n\n    this.disengage = this.disengage.bind(this);\n    this.handleMutation = this.handleMutation.bind(this);\n    this.isInsignificantBranch = this.isInsignificantBranch.bind(this);\n\n    const insignificantBranches = getInsignificantBranches({context: this._context, filter: this._filter});\n    insignificantBranches.forEach(makeElementHidden);\n    this.startObserver();\n  }\n\n  disengage() {\n    if (!this._context) {\n      return;\n    }\n\n    [].forEach.call(this._context.querySelectorAll('[data-cached-aria-hidden]'), undoElementHidden);\n\n    this._context = null;\n    this._filter = null;\n    this._observer && this._observer.disconnect();\n    this._observer = null;\n  }\n\n  startObserver() {\n    if (!window.MutationObserver) {\n      // not supporting IE10 via Mutation Events, because they're too expensive\n      // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\n      return;\n    }\n    // http://caniuse.com/#search=mutation\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this._observer = new MutationObserver(mutations => mutations.forEach(this.handleMutation));\n    this._observer.observe(this._context, observerConfig);\n  }\n\n  handleMutation(mutation) {\n    if (mutation.type === 'childList') {\n      // a new branch cannot contain a filtered element\n      // (unless it is moved there, which is an edge-case we'll ignore for now),\n      // so anything that is within context,\n      // and not within a previously known insignificant branch and not within a filtered element,\n      // must be an insignificant branch as well\n      nodeArray(mutation.addedNodes)\n        .filter(element => element.nodeType === Node.ELEMENT_NODE)\n        .filter(this.isInsignificantBranch)\n        .forEach(makeElementHidden);\n    }\n  }\n\n  isInsignificantBranch(element) {\n    const parents = getParents({context: element});\n    if (parents.some(_element => _element.getAttribute('aria-hidden') === 'true')) {\n      // element is child of a hidden element\n      return false;\n    }\n\n    const isParentOfElement = getParentComparator({element});\n    if (this._filter.some(isParentOfElement)) {\n      // element is a descendant of a filtered element\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport default function({context, filter} = {}) {\n  const service = new HiddenSubtree({context, filter});\n  return { disengage: service.disengage };\n}\n"]}