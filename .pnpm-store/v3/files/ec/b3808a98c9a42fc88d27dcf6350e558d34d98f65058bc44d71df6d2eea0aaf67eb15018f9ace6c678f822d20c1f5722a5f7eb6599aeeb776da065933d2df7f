{"version":3,"sources":["../../src/maintain/disabled.js"],"names":["context","filter","service","InertSubtree","disengage","makeElementInert","element","undoElementInert","observerConfig","attributes","childList","subtree","attributeFilter","_context","document","documentElement","_filter","_inertElementCache","bind","handleMutation","renderInert","filterElements","filterParentElements","focusable","includeContext","strategy","shadowObserver","config","callback","mutations","forEach","list","map","reduce","previous","current","concat","elements","makeInert","push","isParentOfElement","includeSelf","some","parent","mutation","type","addedElements","addedNodes","nodeType","Node","ELEMENT_NODE","length","addedFocusableElements","listQueryFocusable","target"],"mappings":"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","file":"disabled.js","sourcesContent":["\n/*\n  Utility to make a sub-tree of the DOM inert. Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard.\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\n\nimport nodeArray from '../util/node-array';\nimport queryFocusable from '../query/focusable';\nimport elementDisabled from '../element/disabled';\nimport observeShadowMutations from '../observe/shadow-mutations';\nimport {getParentComparator} from '../util/compare-position';\n\nfunction makeElementInert(element) {\n  return elementDisabled(element, true);\n}\n\nfunction undoElementInert(element) {\n  return elementDisabled(element, false);\n}\n\nconst observerConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true,\n  attributeFilter: ['tabindex', 'disabled', 'data-ally-disabled'],\n};\n\nclass InertSubtree {\n  constructor({context, filter} = {}) {\n    this._context = nodeArray(context || document.documentElement)[0];\n    this._filter = nodeArray(filter);\n    this._inertElementCache = [];\n\n    this.disengage = this.disengage.bind(this);\n    this.handleMutation = this.handleMutation.bind(this);\n    this.renderInert = this.renderInert.bind(this);\n    this.filterElements = this.filterElements.bind(this);\n    this.filterParentElements = this.filterParentElements.bind(this);\n\n    const focusable = queryFocusable({\n      context: this._context,\n      includeContext: true,\n      strategy: 'all',\n    });\n\n    this.renderInert(focusable);\n\n    this.shadowObserver = observeShadowMutations({\n      context: this._context,\n      config: observerConfig,\n      callback: mutations => mutations.forEach(this.handleMutation),\n    });\n  }\n\n  disengage() {\n    if (!this._context) {\n      return;\n    }\n\n    undoElementInert(this._context);\n    this._inertElementCache.forEach((element) => undoElementInert(element));\n\n    this._inertElementCache = null;\n    this._filter = null;\n    this._context = null;\n    this.shadowObserver && this.shadowObserver.disengage();\n    this.shadowObserver = null;\n  }\n\n  listQueryFocusable(list) {\n    return list\n      // find all focusable elements within the given contexts\n      .map(element => queryFocusable({context: element, includeContext: true, strategy: 'all'}))\n      // flatten nested arrays\n      .reduce((previous, current) => previous.concat(current), []);\n  }\n\n  renderInert(elements) {\n    const makeInert = (element) => {\n      this._inertElementCache.push(element);\n      makeElementInert(element);\n    };\n\n    elements\n      .filter(this.filterElements)\n      .filter(this.filterParentElements)\n      // ignore elements that already are disabled\n      // so we don't enable them on disengage()\n      .filter(element => !elementDisabled(element))\n      .forEach(makeInert);\n  }\n\n  filterElements(element) {\n    // ignore elements within the exempted sub-trees\n    const isParentOfElement = getParentComparator({element, includeSelf: true});\n    return !this._filter.some(isParentOfElement);\n  }\n\n  filterParentElements(element) {\n    // ignore ancestors of the exempted sub-trees\n    const isParentOfElement = getParentComparator({parent: element});\n    return !this._filter.some(isParentOfElement);\n  }\n\n  handleMutation(mutation) {\n    if (mutation.type === 'childList') {\n      const addedElements = nodeArray(mutation.addedNodes).filter(element => element.nodeType === Node.ELEMENT_NODE);\n      if (!addedElements.length) {\n        return;\n      }\n\n      const addedFocusableElements = this.listQueryFocusable(addedElements);\n      this.renderInert(addedFocusableElements);\n    } else if (mutation.type === 'attributes') {\n      this.renderInert([mutation.target]);\n    }\n  }\n}\n\nexport default function({context, filter} = {}) {\n  const service = new InertSubtree({context, filter});\n  return { disengage: service.disengage };\n}\n"]}