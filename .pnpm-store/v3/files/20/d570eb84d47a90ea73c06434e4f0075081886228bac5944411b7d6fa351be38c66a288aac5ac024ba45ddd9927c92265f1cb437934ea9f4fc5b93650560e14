{"version":3,"sources":["../../src/util/merge-dom-order.js"],"names":["list","elements","resolveElement","_list","slice","_elements","insertions","findInsertionOffsets","insertElementsAtOffsets","getFirstSuccessorOffset","target","element","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","forEach","replace","offset","indexOf","length","injections","push","inserted","sort","a","b","insertion","remove","args","concat","splice","apply"],"mappings":";;;;;;kBAoFe,YAAgD;AAAA,iFAAJ,EAAI;AAAA,MAAtCA,IAAsC,QAAtCA,IAAsC;AAAA,MAAhCC,QAAgC,QAAhCA,QAAgC;AAAA,MAAtBC,cAAsB,QAAtBA,cAAsB;;AAC7D;AACA,MAAMC,QAAQH,KAAKI,KAAL,CAAW,CAAX,CAAd;AACA;AACA,MAAMC,YAAY,yBAAUJ,QAAV,EAAoBG,KAApB,CAA0B,CAA1B,CAAlB;AACA,8BAAaC,SAAb;AACA;AACA;AACA,MAAMC,aAAaC,qBAAqBJ,KAArB,EAA4BE,SAA5B,EAAuCH,cAAvC,CAAnB;AACA;AACAM,0BAAwBL,KAAxB,EAA+BG,UAA/B;AACA,SAAOH,KAAP;AACD,C;;AA5ED;;;;AACA;;;;AACA;;;;;;AAEA,SAASM,uBAAT,CAAiCT,IAAjC,EAAuCU,MAAvC,EAA+C;AAC7C;AACA,SAAO,8BAAUV,IAAV,EAAgB,UAASW,OAAT,EAAkB;AACvC,WAAOD,OAAOE,uBAAP,CAA+BD,OAA/B,IAA0CE,KAAKC,2BAAtD;AACD,GAFM,CAAP;AAGD;AA5BD;;AAEA;;;;;;;;;;;;;;;;;AA4BA,SAASP,oBAAT,CAA8BP,IAA9B,EAAoCC,QAApC,EAA8CC,cAA9C,EAA8D;AAC5D;AACA;AACA,MAAMI,aAAa,EAAnB;AACAL,WAASc,OAAT,CAAiB,UAASJ,OAAT,EAAkB;AACjC,QAAIK,UAAU,IAAd;AACA,QAAIC,SAASjB,KAAKkB,OAAL,CAAaP,OAAb,CAAb;;AAEA,QAAIM,WAAW,CAAC,CAAhB,EAAmB;AACjB;AACAA,eAASR,wBAAwBT,IAAxB,EAA8BW,OAA9B,CAAT;AACAK,gBAAU,KAAV;AACD;;AAED,QAAIC,WAAW,CAAC,CAAhB,EAAmB;AACjB;AACA;AACAA,eAASjB,KAAKmB,MAAd;AACD;;AAED;AACA,QAAMC,aAAa,yBAAUlB,iBAAiBA,eAAeS,OAAf,CAAjB,GAA2CA,OAArD,CAAnB;AACA,QAAI,CAACS,WAAWD,MAAhB,EAAwB;AACtB;AACA;AACD;;AAEDb,eAAWe,IAAX,CAAgB;AACdJ,oBADc;AAEdD,sBAFc;AAGdf,gBAAUmB;AAHI,KAAhB;AAKD,GA5BD;;AA8BA,SAAOd,UAAP;AACD;;AAED,SAASE,uBAAT,CAAiCR,IAAjC,EAAuCM,UAAvC,EAAmD;AACjD;AACA;AACA,MAAIgB,WAAW,CAAf;AACA;AACA;AACAhB,aAAWiB,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,EAAEP,MAAF,GAAWQ,EAAER,MAAvB;AAAA,GAAhB;AACAX,aAAWS,OAAX,CAAmB,UAASW,SAAT,EAAoB;AACrC;AACA,QAAMC,SAASD,UAAUV,OAAV,GAAoB,CAApB,GAAwB,CAAvC;AACA,QAAMY,OAAO,CAACF,UAAUT,MAAV,GAAmBK,QAApB,EAA8BK,MAA9B,EAAsCE,MAAtC,CAA6CH,UAAUzB,QAAvD,CAAb;AACAD,SAAK8B,MAAL,CAAYC,KAAZ,CAAkB/B,IAAlB,EAAwB4B,IAAxB;AACAN,gBAAYI,UAAUzB,QAAV,CAAmBkB,MAAnB,GAA4BQ,MAAxC;AACD,GAND;AAOD","file":"merge-dom-order.js","sourcesContent":["\n// sort a list of elements into another list of elements in DOM order\n\n/*\n  USAGE:\n    mergeDomOrder({\n      // DOM ordered array of elements to use as base of merge\n      list: [],\n      // unordered array of elements to merge into base list\n      elements: [],\n      // callback function to resolve an element\n      resolveElement: function(element) {\n        // return null to skip\n        // return element to replace insertion\n        // return [element1, element2, â€¦] to replace insertion with multiple elements\n        return element;\n      },\n    })\n*/\n\nimport findIndex from '../util/array-find-index';\nimport nodeArray from './node-array';\nimport sortDomOrder from './sort-dom-order';\n\nfunction getFirstSuccessorOffset(list, target) {\n  // find the first element that comes AFTER the target element\n  return findIndex(list, function(element) {\n    return target.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_FOLLOWING;\n  });\n}\n\nfunction findInsertionOffsets(list, elements, resolveElement) {\n  // instead of mutating the elements list directly, remember position and map\n  // to inject later, when we can do this more efficiently\n  const insertions = [];\n  elements.forEach(function(element) {\n    let replace = true;\n    let offset = list.indexOf(element);\n\n    if (offset === -1) {\n      // element is not in target list\n      offset = getFirstSuccessorOffset(list, element);\n      replace = false;\n    }\n\n    if (offset === -1) {\n      // there is no successor in the tabsequence,\n      // meaning the image must be the last element\n      offset = list.length;\n    }\n\n    // allow the consumer to replace the injected element\n    const injections = nodeArray(resolveElement ? resolveElement(element) : element);\n    if (!injections.length) {\n      // we can't inject zero elements\n      return;\n    }\n\n    insertions.push({\n      offset,\n      replace,\n      elements: injections,\n    });\n  });\n\n  return insertions;\n}\n\nfunction insertElementsAtOffsets(list, insertions) {\n  // remember the number of elements we have already injected\n  // so we account for the caused index offset\n  let inserted = 0;\n  // make sure that we insert the elements in sequence,\n  // otherwise the offset compensation won't work\n  insertions.sort((a, b) => a.offset - b.offset);\n  insertions.forEach(function(insertion) {\n    // array.splice has an annoying function signature :(\n    const remove = insertion.replace ? 1 : 0;\n    const args = [insertion.offset + inserted, remove].concat(insertion.elements);\n    list.splice.apply(list, args);\n    inserted += insertion.elements.length - remove;\n  });\n}\n\nexport default function({list, elements, resolveElement} = {}) {\n  // operate on a copy so we don't mutate the original array\n  const _list = list.slice(0);\n  // make sure the elements we're injecting are provided in DOM order\n  const _elements = nodeArray(elements).slice(0);\n  sortDomOrder(_elements);\n  // find the offsets within the target array (list) at which to inject\n  // each individual element (from elements)\n  const insertions = findInsertionOffsets(_list, _elements, resolveElement);\n  // actually inject the elements into the target array at the identified positions\n  insertElementsAtOffsets(_list, insertions);\n  return _list;\n}\n"]}