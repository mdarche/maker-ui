{"version":3,"sources":["../../src/when/focusable.js"],"names":["context","callback","area","TypeError","element","label","filterCallback","target","_document","handle","disengage","removeEventListener","addEventListener"],"mappings":";;;;;;kBAUe,YAAyC;AAAA,iFAAJ,EAAI;AAAA,MAA/BA,OAA+B,QAA/BA,OAA+B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;AAAA,MAAZC,IAAY,QAAZA,IAAY;;AACtD,MAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAIE,SAAJ,CAAc,2DAAd,CAAN;AACD;;AAED,MAAMC,UAAU,gCAAiB;AAC/BC,WAAO,gBADwB;AAE/BL;AAF+B,GAAjB,CAAhB;;AAKA,MAAMM,iBAAiB,SAAjBA,cAAiB,CAASC,MAAT,EAAiB;AACtC,QAAI,CAAC,yBAAYA,MAAZ,CAAL,EAA0B;AACxB,aAAO,KAAP;AACD;;AAED,WAAON,SAASM,MAAT,CAAP;AACD,GAND;;AAQA,MAAMC,YAAY,2BAAYJ,OAAZ,CAAlB;AACA,MAAMK,SAAS,2BAAgB,EAAET,SAASI,OAAX,EAAoBH,UAAUK,cAA9B,EAA8CJ,UAA9C,EAAhB,CAAf;AACA,MAAMQ,YAAY,SAAZA,SAAY,GAAW;AAC3BF,cAAUG,mBAAV,CAA8B,OAA9B,EAAuCD,SAAvC,EAAkD,IAAlD;AACAD,cAAUA,OAAOC,SAAP,EAAV;AACD,GAHD;;AAKAF,YAAUI,gBAAV,CAA2B,OAA3B,EAAoCF,SAApC,EAA+C,IAA/C;;AAEA,SAAO,EAAEA,oBAAF,EAAP;AACD,C;;AAjCD;;;;AACA;;;;AACA;;;;AACA;;;;;;;AAPA","file":"focusable.js","sourcesContent":["\n/*\n  trigger a callback once the context element is focusable and is fully visible in the viewport\n*/\n\nimport whenVisibleArea from './visible-area';\nimport isFocusable from '../is/focusable';\nimport contextToElement from '../util/context-to-element';\nimport getDocument from '../util/get-document';\n\nexport default function({context, callback, area} = {}) {\n  if (typeof callback !== 'function') {\n    throw new TypeError('when/focusable requires options.callback to be a function');\n  }\n\n  const element = contextToElement({\n    label: 'when/focusable',\n    context,\n  });\n\n  const filterCallback = function(target) {\n    if (!isFocusable(target)) {\n      return false;\n    }\n\n    return callback(target);\n  };\n\n  const _document = getDocument(element);\n  const handle = whenVisibleArea({ context: element, callback: filterCallback, area });\n  const disengage = function() {\n    _document.removeEventListener('focus', disengage, true);\n    handle && handle.disengage();\n  };\n\n  _document.addEventListener('focus', disengage, true);\n\n  return { disengage };\n}\n"]}