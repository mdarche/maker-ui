{"version":3,"sources":["../../src/maintain/hidden.js"],"names":["nodeArray","getInsignificantBranches","getParents","toggleAttributeValue","getParentComparator","makeElementHidden","element","attribute","temporaryValue","undoElementHidden","observerConfig","attributes","childList","subtree","HiddenSubtree","context","filter","_context","document","documentElement","_filter","disengage","bind","handleMutation","isInsignificantBranch","insignificantBranches","forEach","startObserver","call","querySelectorAll","_observer","disconnect","window","MutationObserver","mutations","observe","mutation","type","addedNodes","nodeType","Node","ELEMENT_NODE","parents","some","_element","getAttribute","isParentOfElement","service"],"mappings":"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","file":"hidden.js","sourcesContent":["\n// Utility to make the entire DOM aria-hidden=\"true\" except for a given set of elements\n\nimport nodeArray from '../util/node-array';\nimport getInsignificantBranches from '../get/insignificant-branches';\nimport getParents from '../get/parents';\nimport toggleAttributeValue from '../util/toggle-attribute-value';\nimport {getParentComparator} from '../util/compare-position';\n\nfunction makeElementHidden(element) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-hidden',\n    temporaryValue: 'true',\n  });\n}\n\nfunction undoElementHidden(element) {\n  toggleAttributeValue({\n    element,\n    attribute: 'aria-hidden',\n  });\n}\n\nconst observerConfig = {\n  attributes: false,\n  childList: true,\n  subtree: true,\n};\n\nclass HiddenSubtree {\n  constructor({context, filter} = {}) {\n    this._context = nodeArray(context || document.documentElement)[0];\n    this._filter = nodeArray(filter);\n\n    this.disengage = this.disengage.bind(this);\n    this.handleMutation = this.handleMutation.bind(this);\n    this.isInsignificantBranch = this.isInsignificantBranch.bind(this);\n\n    const insignificantBranches = getInsignificantBranches({context: this._context, filter: this._filter});\n    insignificantBranches.forEach(makeElementHidden);\n    this.startObserver();\n  }\n\n  disengage() {\n    if (!this._context) {\n      return;\n    }\n\n    [].forEach.call(this._context.querySelectorAll('[data-cached-aria-hidden]'), undoElementHidden);\n\n    this._context = null;\n    this._filter = null;\n    this._observer && this._observer.disconnect();\n    this._observer = null;\n  }\n\n  startObserver() {\n    if (!window.MutationObserver) {\n      // not supporting IE10 via Mutation Events, because they're too expensive\n      // https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Mutation_events\n      return;\n    }\n    // http://caniuse.com/#search=mutation\n    // https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n    this._observer = new MutationObserver(mutations => mutations.forEach(this.handleMutation));\n    this._observer.observe(this._context, observerConfig);\n  }\n\n  handleMutation(mutation) {\n    if (mutation.type === 'childList') {\n      // a new branch cannot contain a filtered element\n      // (unless it is moved there, which is an edge-case we'll ignore for now),\n      // so anything that is within context,\n      // and not within a previously known insignificant branch and not within a filtered element,\n      // must be an insignificant branch as well\n      nodeArray(mutation.addedNodes)\n        .filter(element => element.nodeType === Node.ELEMENT_NODE)\n        .filter(this.isInsignificantBranch)\n        .forEach(makeElementHidden);\n    }\n  }\n\n  isInsignificantBranch(element) {\n    const parents = getParents({context: element});\n    if (parents.some(_element => _element.getAttribute('aria-hidden') === 'true')) {\n      // element is child of a hidden element\n      return false;\n    }\n\n    const isParentOfElement = getParentComparator({element});\n    if (this._filter.some(isParentOfElement)) {\n      // element is a descendant of a filtered element\n      return false;\n    }\n\n    return true;\n  }\n}\n\nexport default function({context, filter} = {}) {\n  const service = new HiddenSubtree({context, filter});\n  return { disengage: service.disengage };\n}\n"]}