{"version":3,"sources":["../../src/get/focus-redirect-target.js"],"names":["isFocusable","queryFocusable","queryTabbable","contextToElement","getDocument","mergeInDomOrder","getMapOfImage","_supports","supports","formControlElement","element","nodeName","toLowerCase","resolveLabelElement","_document","forId","getAttribute","getElementById","querySelector","resolveLegendWithinFieldset","fieldset","parentNode","focusable","context","strategy","filter","resolveLegendWithinDocument","tabbable","body","length","merged","list","elements","offset","indexOf","resolveLegendElement","focusRedirectLegend","resolveImgElement","focusRedirectImgUsemap","map","skipFocusable","label"],"mappings":"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","file":"focus-redirect-target.js","sourcesContent":["\nimport isFocusable from '../is/focusable';\nimport queryFocusable from '../query/focusable';\nimport queryTabbable from '../query/tabbable';\nimport contextToElement from '../util/context-to-element';\nimport getDocument from '../util/get-document';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport {getMapOfImage} from '../util/image-map';\n\nimport _supports from '../supports/supports';\nlet supports;\n\nfunction formControlElement(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input'\n    || nodeName === 'textarea'\n    || nodeName === 'select'\n    || nodeName === 'button';\n}\n\nfunction resolveLabelElement(element, _document) {\n  const forId = element.getAttribute('for');\n  if (forId) {\n    // <label for=\"…\"> - referenced form control\n    return _document.getElementById(forId);\n  }\n\n  // <label><input - nested form control\n  return element.querySelector('input, select, textarea');\n}\n\nfunction resolveLegendWithinFieldset(element) {\n  // Chrome: first focusable input/select/textarea/button within <fieldset>\n  const fieldset = element.parentNode;\n  const focusable = queryFocusable({\n    context: fieldset,\n    strategy: 'strict',\n  });\n\n  return focusable.filter(formControlElement)[0] || null;\n}\n\nfunction resolveLegendWithinDocument(element, _document) {\n  // Firefox: *next* tabbable (in DOM order)\n  const tabbable = queryTabbable({\n    // Firefox apparently needs to query from the body element,\n    // not the document, looking inside a dynamically written iframe\n    context: _document.body,\n    strategy: 'strict',\n  });\n\n  if (!tabbable.length) {\n    return null;\n  }\n\n  // sort <legend> into the list of tabbable elements\n  // so that we can identify the next element\n  const merged = mergeInDomOrder({\n    list: tabbable,\n    elements: [element],\n  });\n\n  const offset = merged.indexOf(element);\n  if (offset === merged.length - 1) {\n    return null;\n  }\n\n  return merged[offset + 1];\n}\n\nfunction resolveLegendElement(element, _document) {\n  // <legend> - first <input> in <fieldset>\n  if (!supports.focusRedirectLegend) {\n    return null;\n  }\n\n  // legend must be the first child of a <fieldset>\n  const fieldset = element.parentNode;\n  if (fieldset.nodeName.toLowerCase() !== 'fieldset') {\n    return null;\n  }\n\n  if (supports.focusRedirectLegend === 'tabbable') {\n    // Firefox goes for *next* tabbable (in DOM order)\n    return resolveLegendWithinDocument(element, _document);\n  }\n\n  // Chrome goes for first focusable input/select/textarea/button within <fieldset>\n  return resolveLegendWithinFieldset(element, _document);\n}\n\nfunction resolveImgElement(element) {\n  if (!supports.focusRedirectImgUsemap) {\n    return null;\n  }\n\n  // IE9-11: <img usemap=\"#…\" src=\"…\"> - first <area>\n  const map = getMapOfImage(element);\n  return map && map.querySelector('area') || null;\n}\n\nexport default function({context, skipFocusable} = {}) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  const element = contextToElement({\n    label: 'get/focus-redirect-target',\n    context,\n  });\n\n  if (!skipFocusable && isFocusable(element)) {\n    return null;\n  }\n\n  const nodeName = element.nodeName.toLowerCase();\n  const _document = getDocument(element);\n\n  if (nodeName === 'label') {\n    return resolveLabelElement(element, _document);\n  }\n\n  if (nodeName === 'legend') {\n    return resolveLegendElement(element, _document);\n  }\n\n  if (nodeName === 'img') {\n    return resolveImgElement(element, _document);\n  }\n\n  return null;\n}\n\n"]}