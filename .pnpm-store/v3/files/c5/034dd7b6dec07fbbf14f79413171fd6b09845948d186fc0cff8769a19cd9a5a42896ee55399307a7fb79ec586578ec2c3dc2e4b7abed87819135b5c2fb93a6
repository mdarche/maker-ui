{"version":3,"sources":["../../src/query/first-tabbable.js"],"names":["findIndex","queryTabbable","isFocusable","nodeArray","hasAutofocus","element","hasAttribute","hasNoPositiveTabindex","tabIndex","context","sequence","strategy","ignoreAutofocus","defaultToContext","includeOnlyTabbable","index","document","body","length","_isFocusable","rules","except","onlyTabbable"],"mappings":";AACA;;;;;;;;;;;AAWA,OAAOA,SAAP,MAAsB,0BAAtB;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B;AACA,SAAOA,QAAQC,YAAR,CAAqB,WAArB,CAAP;AACD;;AAED,SAASC,qBAAT,CAA+BF,OAA/B,EAAwC;AACtC,SAAOA,QAAQG,QAAR,IAAoB,CAA3B;AACD;;AAED,eAAe,YAOP;AAAA,iFAAJ,EAAI;AAAA,MANNC,OAMM,QANNA,OAMM;AAAA,MALNC,QAKM,QALNA,QAKM;AAAA,MAJNC,QAIM,QAJNA,QAIM;AAAA,MAHNC,eAGM,QAHNA,eAGM;AAAA,MAFNC,gBAEM,QAFNA,gBAEM;AAAA,MADNC,mBACM,QADNA,mBACM;;AACN,MAAIC,QAAQ,CAAC,CAAb;;AAEA,MAAI,CAACL,QAAL,EAAe;AACbD,cAAUN,UAAUM,WAAWO,SAASC,IAA9B,EAAoC,CAApC,CAAV;AACAP,eAAWT,cAAc;AACvBQ,sBADuB;AAEvBK,8CAFuB;AAGvBH;AAHuB,KAAd,CAAX;AAKD;;AAED,MAAID,SAASQ,MAAT,IAAmB,CAACN,eAAxB,EAAyC;AACvC;AACAG,YAAQf,UAAUU,QAAV,EAAoBN,YAApB,CAAR;AACD;;AAED,MAAIM,SAASQ,MAAT,IAAmBH,UAAU,CAAC,CAAlC,EAAqC;AACnC;AACAA,YAAQf,UAAUU,QAAV,EAAoBH,qBAApB,CAAR;AACD;;AAED,MAAMY,eAAejB,YAAYkB,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,kBAAcR;AAD8B,GAAzB,CAArB;;AAIA,MAAIC,UAAU,CAAC,CAAX,IAAgBF,gBAAhB,IAAoCJ,OAApC,IAA+CU,aAAaV,OAAb,CAAnD,EAA0E;AACxE,WAAOA,OAAP;AACD;;AAED,SAAOC,SAASK,KAAT,KAAmB,IAA1B;AACD","file":"first-tabbable.js","sourcesContent":["\n/*\n    query/firstTabbable() finds the first suitable element to receive focus in the given context.\n    If an element has [autofocus] return that element, otherwise return the first element\n    in document order that does *not* have a positive tabIndex (e.g. as [tabindex=\"1\"]),\n    otherwise return the context itself, if it is focusable.\n\n    Note: Chrome's <dialog> will focus the first tabbable element, even if it has\n    [tabindex=\"1\"]. Since [tabindex=\"1\"] is considered\n    bad practice we'll ignore it until someone complains.\n */\n\nimport findIndex from '../util/array-find-index';\nimport queryTabbable from './tabbable';\nimport isFocusable from '../is/focusable';\nimport nodeArray from '../util/node-array';\n\nfunction hasAutofocus(element) {\n  // [autofocus] actually only works on form element, but who cares?\n  return element.hasAttribute('autofocus');\n}\n\nfunction hasNoPositiveTabindex(element) {\n  return element.tabIndex <= 0;\n}\n\nexport default function({\n  context,\n  sequence,\n  strategy,\n  ignoreAutofocus,\n  defaultToContext,\n  includeOnlyTabbable,\n} = {}) {\n  let index = -1;\n\n  if (!sequence) {\n    context = nodeArray(context || document.body)[0];\n    sequence = queryTabbable({\n      context,\n      includeOnlyTabbable,\n      strategy,\n    });\n  }\n\n  if (sequence.length && !ignoreAutofocus) {\n    // prefer [autofocus]\n    index = findIndex(sequence, hasAutofocus);\n  }\n\n  if (sequence.length && index === -1) {\n    // ignore positive [tabindex]\n    index = findIndex(sequence, hasNoPositiveTabindex);\n  }\n\n  const _isFocusable = isFocusable.rules.except({\n    onlyTabbable: includeOnlyTabbable,\n  });\n\n  if (index === -1 && defaultToContext && context && _isFocusable(context)) {\n    return context;\n  }\n\n  return sequence[index] || null;\n}\n"]}