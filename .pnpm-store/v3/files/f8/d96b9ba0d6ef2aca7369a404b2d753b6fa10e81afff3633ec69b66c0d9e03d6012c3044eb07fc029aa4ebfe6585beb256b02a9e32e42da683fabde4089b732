{"version":3,"sources":["../../src/query/focusable.strict.js"],"names":["isFocusable","isFocusRelevant","getDocument","createFilter","condition","filter","node","shadowRoot","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","acceptNode","PossiblyFocusableFilter","queryFocusableStrict","context","includeContext","includeOnlyTabbable","strategy","document","documentElement","_isFocusable","rules","except","onlyTabbable","_document","walker","createTreeWalker","SHOW_ELEMENT","list","nextNode","currentNode","push","concat","unshift"],"mappings":";AACA;AACA;;AAEA,OAAOA,WAAP,MAAwB,iBAAxB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B;AACA,MAAMC,SAAS,SAATA,MAAS,CAASC,IAAT,EAAe;AAC5B,QAAIA,KAAKC,UAAT,EAAqB;AACnB;AACA;AACA,aAAOC,WAAWC,aAAlB;AACD;;AAED,QAAIL,UAAUE,IAAV,CAAJ,EAAqB;AACnB;AACA,aAAOE,WAAWC,aAAlB;AACD;;AAED,WAAOD,WAAWE,WAAlB;AACD,GAbD;AAcA;AACA;AACAL,SAAOM,UAAP,GAAoBN,MAApB;AACA,SAAOA,MAAP;AACD;;AAED,IAAMO,0BAA0BT,aAAaF,eAAb,CAAhC;;AAEA,eAAe,SAASY,oBAAT,GAKP;AAAA,iFAAJ,EAAI;AAAA,MAJNC,OAIM,QAJNA,OAIM;AAAA,MAHNC,cAGM,QAHNA,cAGM;AAAA,MAFNC,mBAEM,QAFNA,mBAEM;AAAA,MADNC,QACM,QADNA,QACM;;AACN,MAAI,CAACH,OAAL,EAAc;AACZA,cAAUI,SAASC,eAAnB;AACD;;AAED,MAAMC,eAAepB,YAAYqB,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,kBAAcP;AAD8B,GAAzB,CAArB;;AAIA,MAAMQ,YAAYtB,YAAYY,OAAZ,CAAlB;AACA;AACA,MAAMW,SAASD,UAAUE,gBAAV;AACb;AACAZ,SAFa;AAGb;AACAN,aAAWmB,YAJE;AAKb;AACAV,eAAa,KAAb,GAAqBL,uBAArB,GAA+CT,aAAaiB,YAAb,CANlC;AAOb;AACA,OARa,CAAf;;AAWA,MAAIQ,OAAO,EAAX;;AAEA,SAAOH,OAAOI,QAAP,EAAP,EAA0B;AACxB,QAAIJ,OAAOK,WAAP,CAAmBvB,UAAvB,EAAmC;AACjC,UAAIa,aAAaK,OAAOK,WAApB,CAAJ,EAAsC;AACpCF,aAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;;AAEDF,aAAOA,KAAKI,MAAL,CAAYnB,qBAAqB;AACtCC,iBAASW,OAAOK,WAAP,CAAmBvB,UADU;AAEtCS,gDAFsC;AAGtCC;AAHsC,OAArB,CAAZ,CAAP;AAKD,KAVD,MAUO;AACLW,WAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;AACF;;AAED;AACA,MAAIf,cAAJ,EAAoB;AAClB,QAAIE,aAAa,KAAjB,EAAwB;AACtB,UAAIhB,gBAAgBa,OAAhB,CAAJ,EAA8B;AAC5Bc,aAAKK,OAAL,CAAanB,OAAb;AACD;AACF,KAJD,MAIO,IAAIM,aAAaN,OAAb,CAAJ,EAA2B;AAChCc,WAAKK,OAAL,CAAanB,OAAb;AACD;AACF;;AAED,SAAOc,IAAP;AACD","file":"focusable.strict.js","sourcesContent":["\n// https://www.w3.org/TR/html5/editing.html#focusable\n// https://www.w3.org/WAI/PF/aria-practices/#keyboard\n\nimport isFocusable from '../is/focusable';\nimport isFocusRelevant from '../is/focus-relevant';\nimport getDocument from '../util/get-document';\n\nfunction createFilter(condition) {\n  // see https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter\n  const filter = function(node) {\n    if (node.shadowRoot) {\n      // return ShadowRoot elements regardless of them being focusable,\n      // so they can be walked recursively later\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    if (condition(node)) {\n      // finds elements that could have been found by document.querySelectorAll()\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    return NodeFilter.FILTER_SKIP;\n  };\n  // IE requires a function, Browsers require {acceptNode: function}\n  // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm\n  filter.acceptNode = filter;\n  return filter;\n}\n\nconst PossiblyFocusableFilter = createFilter(isFocusRelevant);\n\nexport default function queryFocusableStrict({\n  context,\n  includeContext,\n  includeOnlyTabbable,\n  strategy,\n} = {}) {\n  if (!context) {\n    context = document.documentElement;\n  }\n\n  const _isFocusable = isFocusable.rules.except({\n    onlyTabbable: includeOnlyTabbable,\n  });\n\n  const _document = getDocument(context);\n  // see https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker\n  const walker = _document.createTreeWalker(\n    // root element to start search in\n    context,\n    // element type filter\n    NodeFilter.SHOW_ELEMENT,\n    // custom NodeFilter filter\n    strategy === 'all' ? PossiblyFocusableFilter : createFilter(_isFocusable),\n    // deprecated, but IE requires it\n    false\n  );\n\n  let list = [];\n\n  while (walker.nextNode()) {\n    if (walker.currentNode.shadowRoot) {\n      if (_isFocusable(walker.currentNode)) {\n        list.push(walker.currentNode);\n      }\n\n      list = list.concat(queryFocusableStrict({\n        context: walker.currentNode.shadowRoot,\n        includeOnlyTabbable,\n        strategy,\n      }));\n    } else {\n      list.push(walker.currentNode);\n    }\n  }\n\n  // add context if requested and focusable\n  if (includeContext) {\n    if (strategy === 'all') {\n      if (isFocusRelevant(context)) {\n        list.unshift(context);\n      }\n    } else if (_isFocusable(context)) {\n      list.unshift(context);\n    }\n  }\n\n  return list;\n}\n"]}