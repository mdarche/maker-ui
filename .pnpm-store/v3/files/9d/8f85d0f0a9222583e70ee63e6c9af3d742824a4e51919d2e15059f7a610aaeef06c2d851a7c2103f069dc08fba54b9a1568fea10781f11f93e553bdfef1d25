{"version":3,"sources":["../../src/maintain/disabled.js"],"names":["nodeArray","queryFocusable","elementDisabled","observeShadowMutations","getParentComparator","makeElementInert","element","undoElementInert","observerConfig","attributes","childList","subtree","attributeFilter","InertSubtree","context","filter","_context","document","documentElement","_filter","_inertElementCache","disengage","bind","handleMutation","renderInert","filterElements","filterParentElements","focusable","includeContext","strategy","shadowObserver","config","callback","mutations","forEach","list","map","reduce","previous","current","concat","elements","makeInert","push","isParentOfElement","includeSelf","some","parent","mutation","type","addedElements","addedNodes","nodeType","Node","ELEMENT_NODE","length","addedFocusableElements","listQueryFocusable","target","service"],"mappings":"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","file":"disabled.js","sourcesContent":["\n/*\n  Utility to make a sub-tree of the DOM inert. Inert means the elements cannot be interacted\n  with and they cannot be focused via script, pointer or keyboard.\n\n  inert attribute was [removed](https://html5.org/r/8536) [tweet by steve](https://twitter.com/stevefaulkner/status/443075900201259008)\n  but definition of [inert subtrees](https://www.w3.org/html/wg/drafts/html/master/editing.html#inert-subtrees) remains.\n\n  [implementation idea by Vasilis](https://codepen.io/vasilisvg/pen/scowI)\n  [inert attribute polyfill by GoogleChrome](https://github.com/GoogleChrome/inert-polyfill)\n\n  [Gecko Bug: Inert Attribute](https://bugzilla.mozilla.org/show_bug.cgi?id=921504)\n  [Chromium Bug: Inert Attribute](https://code.google.com/p/chromium/issues/detail?id=269846)\n  [Chromium Bug: Inert Subtree](https://code.google.com/p/chromium/issues/detail?id=241699)\n  [WebKit Bug: Inert Subtree](https://bugs.webkit.org/show_bug.cgi?id=110952)\n*/\n\nimport nodeArray from '../util/node-array';\nimport queryFocusable from '../query/focusable';\nimport elementDisabled from '../element/disabled';\nimport observeShadowMutations from '../observe/shadow-mutations';\nimport {getParentComparator} from '../util/compare-position';\n\nfunction makeElementInert(element) {\n  return elementDisabled(element, true);\n}\n\nfunction undoElementInert(element) {\n  return elementDisabled(element, false);\n}\n\nconst observerConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true,\n  attributeFilter: ['tabindex', 'disabled', 'data-ally-disabled'],\n};\n\nclass InertSubtree {\n  constructor({context, filter} = {}) {\n    this._context = nodeArray(context || document.documentElement)[0];\n    this._filter = nodeArray(filter);\n    this._inertElementCache = [];\n\n    this.disengage = this.disengage.bind(this);\n    this.handleMutation = this.handleMutation.bind(this);\n    this.renderInert = this.renderInert.bind(this);\n    this.filterElements = this.filterElements.bind(this);\n    this.filterParentElements = this.filterParentElements.bind(this);\n\n    const focusable = queryFocusable({\n      context: this._context,\n      includeContext: true,\n      strategy: 'all',\n    });\n\n    this.renderInert(focusable);\n\n    this.shadowObserver = observeShadowMutations({\n      context: this._context,\n      config: observerConfig,\n      callback: mutations => mutations.forEach(this.handleMutation),\n    });\n  }\n\n  disengage() {\n    if (!this._context) {\n      return;\n    }\n\n    undoElementInert(this._context);\n    this._inertElementCache.forEach((element) => undoElementInert(element));\n\n    this._inertElementCache = null;\n    this._filter = null;\n    this._context = null;\n    this.shadowObserver && this.shadowObserver.disengage();\n    this.shadowObserver = null;\n  }\n\n  listQueryFocusable(list) {\n    return list\n      // find all focusable elements within the given contexts\n      .map(element => queryFocusable({context: element, includeContext: true, strategy: 'all'}))\n      // flatten nested arrays\n      .reduce((previous, current) => previous.concat(current), []);\n  }\n\n  renderInert(elements) {\n    const makeInert = (element) => {\n      this._inertElementCache.push(element);\n      makeElementInert(element);\n    };\n\n    elements\n      .filter(this.filterElements)\n      .filter(this.filterParentElements)\n      // ignore elements that already are disabled\n      // so we don't enable them on disengage()\n      .filter(element => !elementDisabled(element))\n      .forEach(makeInert);\n  }\n\n  filterElements(element) {\n    // ignore elements within the exempted sub-trees\n    const isParentOfElement = getParentComparator({element, includeSelf: true});\n    return !this._filter.some(isParentOfElement);\n  }\n\n  filterParentElements(element) {\n    // ignore ancestors of the exempted sub-trees\n    const isParentOfElement = getParentComparator({parent: element});\n    return !this._filter.some(isParentOfElement);\n  }\n\n  handleMutation(mutation) {\n    if (mutation.type === 'childList') {\n      const addedElements = nodeArray(mutation.addedNodes).filter(element => element.nodeType === Node.ELEMENT_NODE);\n      if (!addedElements.length) {\n        return;\n      }\n\n      const addedFocusableElements = this.listQueryFocusable(addedElements);\n      this.renderInert(addedFocusableElements);\n    } else if (mutation.type === 'attributes') {\n      this.renderInert([mutation.target]);\n    }\n  }\n}\n\nexport default function({context, filter} = {}) {\n  const service = new InertSubtree({context, filter});\n  return { disengage: service.disengage };\n}\n"]}