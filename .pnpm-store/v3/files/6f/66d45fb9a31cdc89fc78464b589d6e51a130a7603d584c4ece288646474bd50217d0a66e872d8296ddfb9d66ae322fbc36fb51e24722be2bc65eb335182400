{"version":3,"sources":["../../src/query/tabsequence.sort-area.js"],"names":["queryTabbable","mergeInDomOrder","getDocument","getMapByName","Maps","context","_document","maps","name","addMapByName","map","elements","filter","element","nodeName","toLowerCase","parentNode","push","usemaps","querySelectorAll","_elements","extractAreasFromList","length","list","resolveElement","image","getAttribute","slice","getAreasFor"],"mappings":";;;;AACA;;AAEA,OAAOA,aAAP,MAA0B,YAA1B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAAQC,YAAR,QAA2B,mBAA3B;;IAEMC,I;AACJ,gBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,SAAL,GAAiBJ,YAAYG,OAAZ,CAAjB;AACA,SAAKE,IAAL,GAAY,EAAZ;AACD;;;;gCAEWC,I,EAAM;AAChB,UAAI,CAAC,KAAKD,IAAL,CAAUC,IAAV,CAAL,EAAsB;AACpB;AACA;AACA,aAAKC,YAAL,CAAkBD,IAAlB;AACD;;AAED,aAAO,KAAKD,IAAL,CAAUC,IAAV,CAAP;AACD;;;iCAEYA,I,EAAM;AACjB,UAAME,MAAMP,aAAaK,IAAb,EAAmB,KAAKF,SAAxB,CAAZ;AACA,UAAI,CAACI,GAAL,EAAU;AACR;AACA;AACD;;AAED,WAAKH,IAAL,CAAUG,IAAIF,IAAd,IAAsBR,cAAc,EAACK,SAASK,GAAV,EAAd,CAAtB;AACD;;;yCAEoBC,Q,EAAU;AAC7B;AACA;AACA,aAAOA,SAASC,MAAT,CAAgB,UAASC,OAAT,EAAkB;AACvC,YAAMC,WAAWD,QAAQC,QAAR,CAAiBC,WAAjB,EAAjB;AACA,YAAID,aAAa,MAAjB,EAAyB;AACvB,iBAAO,IAAP;AACD;;AAED,YAAMJ,MAAMG,QAAQG,UAApB;AACA,YAAI,CAAC,KAAKT,IAAL,CAAUG,IAAIF,IAAd,CAAL,EAA0B;AACxB,eAAKD,IAAL,CAAUG,IAAIF,IAAd,IAAsB,EAAtB;AACD;;AAED,aAAKD,IAAL,CAAUG,IAAIF,IAAd,EAAoBS,IAApB,CAAyBJ,OAAzB;AACA,eAAO,KAAP;AACD,OAbM,EAaJ,IAbI,CAAP;AAcD;;;;;;AAGH,eAAe,UAASF,QAAT,EAAmBN,OAAnB,EAA4B;AACzC;AACA;AACA;AACA,MAAMa,UAAUb,QAAQc,gBAAR,CAAyB,aAAzB,CAAhB;AACA,MAAMZ,OAAO,IAAIH,IAAJ,CAASC,OAAT,CAAb;;AAEA;AACA;AACA,MAAMe,YAAYb,KAAKc,oBAAL,CAA0BV,QAA1B,CAAlB;;AAEA,MAAI,CAACO,QAAQI,MAAb,EAAqB;AACnB;AACA;AACA,WAAOF,SAAP;AACD;;AAED,SAAOnB,gBAAgB;AACrBsB,UAAMH,SADe;AAErBT,cAAUO,OAFW;AAGrBM,oBAAgB,wBAASC,KAAT,EAAgB;AAC9B,UAAMjB,OAAOiB,MAAMC,YAAN,CAAmB,QAAnB,EAA6BC,KAA7B,CAAmC,CAAnC,CAAb;AACA,aAAOpB,KAAKqB,WAAL,CAAiBpB,IAAjB,CAAP;AACD;AANoB,GAAhB,CAAP;AAQD","file":"tabsequence.sort-area.js","sourcesContent":["\n// move <area> elements to the location of the <img> elements that reference them\n\nimport queryTabbable from './tabbable';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport getDocument from '../util/get-document';\nimport {getMapByName} from '../util/image-map';\n\nclass Maps {\n  constructor(context) {\n    this._document = getDocument(context);\n    this.maps = {};\n  }\n\n  getAreasFor(name) {\n    if (!this.maps[name]) {\n      // the map is not defined within the context, so we\n      // have to go find it elsewhere in the document\n      this.addMapByName(name);\n    }\n\n    return this.maps[name];\n  }\n\n  addMapByName(name) {\n    const map = getMapByName(name, this._document);\n    if (!map) {\n      // if there is no map, the img[usemap] wasn't doing anything anyway\n      return;\n    }\n\n    this.maps[map.name] = queryTabbable({context: map});\n  }\n\n  extractAreasFromList(elements) {\n    // remove all <area> elements from the elements list,\n    // but put them the map for later retrieval\n    return elements.filter(function(element) {\n      const nodeName = element.nodeName.toLowerCase();\n      if (nodeName !== 'area') {\n        return true;\n      }\n\n      const map = element.parentNode;\n      if (!this.maps[map.name]) {\n        this.maps[map.name] = [];\n      }\n\n      this.maps[map.name].push(element);\n      return false;\n    }, this);\n  }\n}\n\nexport default function(elements, context) {\n  // images - unless they are focusable themselves, likely not\n  // part of the elements list, so we'll have to find them and\n  // sort them into the elements list manually\n  const usemaps = context.querySelectorAll('img[usemap]');\n  const maps = new Maps(context);\n\n  // remove all <area> elements from the elements list,\n  // but put them the map for later retrieval\n  const _elements = maps.extractAreasFromList(elements);\n\n  if (!usemaps.length) {\n    // the context does not contain any <area>s so no need\n    // to replace anything, just remove any maps\n    return _elements;\n  }\n\n  return mergeInDomOrder({\n    list: _elements,\n    elements: usemaps,\n    resolveElement: function(image) {\n      const name = image.getAttribute('usemap').slice(1);\n      return maps.getAreasFor(name);\n    },\n  });\n}\n"]}