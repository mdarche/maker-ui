{"version":3,"sources":["../../src/observe/interaction-type.js"],"names":["decorateService","_activePointers","_activeKeys","pointerStartEvents","pointerEndEvents","handleWindowBlurEvent","handlePointerStartEvent","event","isPrimary","handlePointerEndEvent","touches","length","window","setImmediate","setTimeout","Math","max","handleKeyStartEvent","keyCode","which","handleKeyEndEvent","getInteractionType","pointer","Boolean","key","disengage","removeEventListener","document","documentElement","forEach","engage","addEventListener","get"],"mappings":"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","file":"interaction-type.js","sourcesContent":["\n/*\n  Observe keyboard-, pointer-, mouse- and touch-events so that a query for\n  the current interaction type can be made at any time. For pointer interaction\n  this observer is limited to pointer button down/up - move is not observed!\n\n  USAGE:\n    var listener = engage();\n    listener.get() === {pointer: Boolean, key: Boolean}\n*/\n\nimport decorateService from '../util/decorate-service';\n\n// counters to track primary input\nlet _activePointers = 0;\nlet _activeKeys = 0;\n\nconst pointerStartEvents = [\n  'touchstart',\n  'pointerdown',\n  'MSPointerDown',\n  'mousedown',\n];\nconst pointerEndEvents = [\n  'touchend',\n  'touchcancel',\n  'pointerup',\n  'MSPointerUp',\n  'pointercancel',\n  'MSPointerCancel',\n  'mouseup',\n];\n\nfunction handleWindowBlurEvent() {\n  // reset internal counters when window loses focus\n  _activePointers = 0;\n  _activeKeys = 0;\n}\n\nfunction handlePointerStartEvent(event) {\n  if (event.isPrimary === false) {\n    // ignore non-primary pointer events\n    // https://w3c.github.io/pointerevents/#widl-PointerEvent-isPrimary\n    return;\n  }\n\n  // mousedown without following mouseup\n  // (likely not possible in Chrome)\n  _activePointers++;\n}\n\nfunction handlePointerEndEvent(event) {\n  if (event.isPrimary === false) {\n    // ignore non-primary pointer events\n    // https://w3c.github.io/pointerevents/#widl-PointerEvent-isPrimary\n    return;\n  } else if (event.touches) {\n    _activePointers = event.touches.length;\n    return;\n  }\n\n  // delay reset to when the current handlers are executed\n  (window.setImmediate || window.setTimeout)(function() {\n    // mouseup without prior mousedown\n    // (drag something out of the window)\n    _activePointers = Math.max(_activePointers - 1, 0);\n  });\n}\n\nfunction handleKeyStartEvent(event) {\n  // ignore modifier keys\n  switch (event.keyCode || event.which) {\n    case 16: // space\n    case 17: // control\n    case 18: // alt\n    case 91: // command left\n    case 93: // command right\n      return;\n  }\n\n  // keydown without a following keyup\n  // (may happen on CMD+TAB)\n  _activeKeys++;\n}\n\nfunction handleKeyEndEvent(event) {\n  // ignore modifier keys\n  switch (event.keyCode || event.which) {\n    case 16: // space\n    case 17: // control\n    case 18: // alt\n    case 91: // command left\n    case 93: // command right\n      return;\n  }\n\n  // delay reset to when the current handlers are executed\n  (window.setImmediate || window.setTimeout)(function() {\n    // keyup without prior keydown\n    // (may happen on CMD+R)\n    _activeKeys = Math.max(_activeKeys - 1, 0);\n  });\n}\n\nfunction getInteractionType() {\n  return {\n    pointer: Boolean(_activePointers),\n    key: Boolean(_activeKeys),\n  };\n}\n\nfunction disengage() {\n  _activePointers = _activeKeys = 0;\n  window.removeEventListener('blur', handleWindowBlurEvent, false);\n  document.documentElement.removeEventListener('keydown', handleKeyStartEvent, true);\n  document.documentElement.removeEventListener('keyup', handleKeyEndEvent, true);\n  pointerStartEvents.forEach(function(event) {\n    document.documentElement.removeEventListener(event, handlePointerStartEvent, true);\n  });\n  pointerEndEvents.forEach(function(event) {\n    document.documentElement.removeEventListener(event, handlePointerEndEvent, true);\n  });\n}\n\nfunction engage() {\n  // window blur must be in bubble phase so it won't capture regular blurs\n  window.addEventListener('blur', handleWindowBlurEvent, false);\n  // handlers to identify the method of focus change\n  document.documentElement.addEventListener('keydown', handleKeyStartEvent, true);\n  document.documentElement.addEventListener('keyup', handleKeyEndEvent, true);\n  pointerStartEvents.forEach(function(event) {\n    document.documentElement.addEventListener(event, handlePointerStartEvent, true);\n  });\n  pointerEndEvents.forEach(function(event) {\n    document.documentElement.addEventListener(event, handlePointerEndEvent, true);\n  });\n\n  return {\n    get: getInteractionType,\n  };\n}\n\nexport default decorateService({ engage, disengage });\n"]}