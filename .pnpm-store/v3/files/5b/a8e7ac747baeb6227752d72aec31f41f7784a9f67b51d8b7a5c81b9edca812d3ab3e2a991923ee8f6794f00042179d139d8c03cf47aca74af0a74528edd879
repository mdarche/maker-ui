{"version":3,"sources":["../../src/when/key.binding.js"],"names":["text","split","map","_text","tokens","_modifiers","resolveModifiers","slice","_keyCodes","resolveKey","keyCodes","modifiers","matchModifiers","bind","modifier","alt","ctrl","meta","shift","modifierSequence","Object","keys","name","createExpectedModifiers","ignoreModifiers","value","altKey","ctrlKey","metaKey","shiftKey","indexOf","expected","forEach","token","operator","propertyName","TypeError","key","code","parseInt","isNaN","concat","_alias","event","some","prop","Boolean"],"mappings":";;;;;;kBAgGe,UAASA,IAAT,EAAe;AAC5B,SAAOA,KAAKC,KAAL,CAAW,KAAX,EAAkBC,GAAlB,CAAsB,UAASC,KAAT,EAAgB;AAC3C,QAAMC,SAASD,MAAMF,KAAN,CAAY,GAAZ,CAAf;AACA,QAAMI,aAAaC,iBAAiBF,OAAOG,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAjB,CAAnB;AACA,QAAMC,YAAYC,WAAWL,OAAOG,KAAP,CAAa,CAAC,CAAd,CAAX,CAAlB;AACA,WAAO;AACLG,gBAAUF,SADL;AAELG,iBAAWN,UAFN;AAGLO,sBAAgBA,eAAeC,IAAf,CAAoB,IAApB,EAA0BR,UAA1B;AAHX,KAAP;AAKD,GATM,CAAP;AAUD,C;;AAtFD;;;;;;AAEA,IAAMS,WAAW;AACfC,OAAK,QADU;AAEfC,QAAM,SAFS;AAGfC,QAAM,SAHS;AAIfC,SAAO;AAJQ,CAAjB;AAtBA;;;;;;;;;;;;;;;;;;;;AA6BA,IAAMC,mBAAmBC,OAAOC,IAAP,CAAYP,QAAZ,EAAsBZ,GAAtB,CAA0B;AAAA,SAAQY,SAASQ,IAAT,CAAR;AAAA,CAA1B,CAAzB;;AAEA,SAASC,uBAAT,CAAiCC,eAAjC,EAAkD;AAChD,MAAMC,QAAQD,kBAAkB,IAAlB,GAAyB,KAAvC;AACA,SAAO;AACLE,YAAQD,KADH;AAELE,aAASF,KAFJ;AAGLG,aAASH,KAHJ;AAILI,cAAUJ;AAJL,GAAP;AAMD;;AAED,SAASnB,gBAAT,CAA0BK,SAA1B,EAAqC;AACnC,MAAMa,kBAAkBb,UAAUmB,OAAV,CAAkB,GAAlB,MAA2B,CAAC,CAApD;AACA,MAAMC,WAAWR,wBAAwBC,eAAxB,CAAjB;;AAEAb,YAAUqB,OAAV,CAAkB,UAASC,KAAT,EAAgB;AAChC,QAAIA,UAAU,GAAd,EAAmB;AACjB;AACA;AACD;;AAED;AACA,QAAIR,QAAQ,IAAZ;AACA,QAAMS,WAAWD,MAAM1B,KAAN,CAAY,CAAZ,EAAe,CAAf,CAAjB;AACA,QAAI2B,aAAa,GAAjB,EAAsB;AACpB;AACAT,cAAQ,IAAR;AACD,KAHD,MAGO,IAAIS,aAAa,GAAjB,EAAsB;AAC3B;AACAT,cAAQ,KAAR;AACD;;AAED,QAAIA,UAAU,IAAd,EAAoB;AAClB;AACAQ,cAAQA,MAAM1B,KAAN,CAAY,CAAZ,CAAR;AACD;;AAED,QAAM4B,eAAerB,SAASmB,KAAT,CAArB;AACA,QAAI,CAACE,YAAL,EAAmB;AACjB,YAAM,IAAIC,SAAJ,CAAc,uBAAuBH,KAAvB,GAA+B,GAA7C,CAAN;AACD;;AAEDF,aAASI,YAAT,IAAyBV,KAAzB;AACD,GA5BD;;AA8BA,SAAOM,QAAP;AACD;;AAED,SAAStB,UAAT,CAAoB4B,GAApB,EAAyB;AACvB,MAAMC,OAAO,kBAAQD,GAAR,KAAgBE,SAASF,GAAT,EAAc,EAAd,CAA7B;AACA,MAAI,CAACC,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAAzB,IAAqCE,MAAMF,IAAN,CAAzC,EAAsD;AACpD,UAAM,IAAIF,SAAJ,CAAc,kBAAkBC,GAAlB,GAAwB,GAAtC,CAAN;AACD;;AAED,SAAO,CAACC,IAAD,EAAOG,MAAP,CAAc,kBAAQC,MAAR,CAAeJ,IAAf,KAAwB,EAAtC,CAAP;AACD;;AAED,SAAS1B,cAAT,CAAwBmB,QAAxB,EAAkCY,KAAlC,EAAyC;AACvC;AACA,SAAO,CAACxB,iBAAiByB,IAAjB,CAAsB,UAASC,IAAT,EAAe;AAC3C;AACA,WAAO,OAAOd,SAASc,IAAT,CAAP,KAA0B,SAA1B,IAAuCC,QAAQH,MAAME,IAAN,CAAR,MAAyBd,SAASc,IAAT,CAAvE;AACD,GAHO,CAAR;AAID","file":"key.binding.js","sourcesContent":["\n/*\n  decodes a key binding token to a JavaScript structure\n\n  returns an array of objects:\n    {\n      // key name translated to keyCode (possibly more than one)\n      keyCodes: [<number>],\n      // translated modifiers\n      modifiers: {\n        altKey: null,   // ignore\n        ctrKey: false,  // expect not pressed\n        metaKey: true,  // expect pressed\n        shiftKey: true, // expect pressed\n      },\n      // callback that returns true if event's\n      // modifier keys match the expected state\n      matchModifiers: function(event){},\n    }\n*/\n\nimport keycode from '../map/keycode';\n\nconst modifier = {\n  alt: 'altKey',\n  ctrl: 'ctrlKey',\n  meta: 'metaKey',\n  shift: 'shiftKey',\n};\n\nconst modifierSequence = Object.keys(modifier).map(name => modifier[name]);\n\nfunction createExpectedModifiers(ignoreModifiers) {\n  const value = ignoreModifiers ? null : false;\n  return {\n    altKey: value,\n    ctrlKey: value,\n    metaKey: value,\n    shiftKey: value,\n  };\n}\n\nfunction resolveModifiers(modifiers) {\n  const ignoreModifiers = modifiers.indexOf('*') !== -1;\n  const expected = createExpectedModifiers(ignoreModifiers);\n\n  modifiers.forEach(function(token) {\n    if (token === '*') {\n      // we've already covered the all-in operator\n      return;\n    }\n\n    // we want the modifier pressed\n    let value = true;\n    const operator = token.slice(0, 1);\n    if (operator === '?') {\n      // we don't care if the modifier is pressed\n      value = null;\n    } else if (operator === '!') {\n      // we do not want the modifier pressed\n      value = false;\n    }\n\n    if (value !== true) {\n      // compensate for the modifier's operator\n      token = token.slice(1);\n    }\n\n    const propertyName = modifier[token];\n    if (!propertyName) {\n      throw new TypeError('Unknown modifier \"' + token + '\"');\n    }\n\n    expected[propertyName] = value;\n  });\n\n  return expected;\n}\n\nfunction resolveKey(key) {\n  const code = keycode[key] || parseInt(key, 10);\n  if (!code || typeof code !== 'number' || isNaN(code)) {\n    throw new TypeError('Unknown key \"' + key + '\"');\n  }\n\n  return [code].concat(keycode._alias[code] || []);\n}\n\nfunction matchModifiers(expected, event) {\n  // returns true on match\n  return !modifierSequence.some(function(prop) {\n    // returns true on mismatch\n    return typeof expected[prop] === 'boolean' && Boolean(event[prop]) !== expected[prop];\n  });\n}\n\nexport default function(text) {\n  return text.split(/\\s+/).map(function(_text) {\n    const tokens = _text.split('+');\n    const _modifiers = resolveModifiers(tokens.slice(0, -1));\n    const _keyCodes = resolveKey(tokens.slice(-1));\n    return {\n      keyCodes: _keyCodes,\n      modifiers: _modifiers,\n      matchModifiers: matchModifiers.bind(null, _modifiers),\n    };\n  });\n}\n"]}