{"version":3,"sources":["../../src/is/disabled.js"],"names":["context","supports","element","label","hasAttribute","disabled","parents","some","isDisabledFieldset","focusFormDisabled","isDisabledForm","nodeName","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;;oBAoBe,UAASA,OAAT,EAAkB;AAC/B,QAAI,CAACC,QAAL,EAAe;AACbA,iBAAW,yBAAX;AACD;;AAED,QAAMC,UAAU,gCAAiB;AAC/BC,aAAO,aADwB;AAE/BH;AAF+B,KAAjB,CAAhB;;AAKA,QAAIE,QAAQE,YAAR,CAAqB,oBAArB,CAAJ,EAAgD;AAC9C;AACA,aAAO,IAAP;AACD;;AAED,QAAI,CAAC,uCAA0BF,OAA1B,CAAL,EAAyC;AACvC;AACA,aAAO,KAAP;AACD;;AAED,QAAIA,QAAQG,QAAZ,EAAsB;AACpB;AACA,aAAO,IAAP;AACD;;AAED,QAAMC,UAAU,uBAAW,EAACN,SAASE,OAAV,EAAX,CAAhB;AACA,QAAII,QAAQC,IAAR,CAAaC,kBAAb,CAAJ,EAAsC;AACpC;AACA,aAAO,IAAP;AACD;;AAED,QAAI,CAACP,SAASQ,iBAAV,IAA+BH,QAAQC,IAAR,CAAaG,cAAb,CAAnC,EAAiE;AAC/D;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD,G;;;;;;;;;;;;;;;;AAxDD;;AAOA,MAAIT,iBAAJ;;AAEA,WAASO,kBAAT,CAA4BN,OAA5B,EAAqC;AACnC,QAAMS,WAAWT,QAAQS,QAAR,CAAiBC,WAAjB,EAAjB;AACA,WAAOD,aAAa,UAAb,IAA2BT,QAAQG,QAA1C;AACD;;AAED,WAASK,cAAT,CAAwBR,OAAxB,EAAiC;AAC/B,QAAMS,WAAWT,QAAQS,QAAR,CAAiBC,WAAjB,EAAjB;AACA,WAAOD,aAAa,MAAb,IAAuBT,QAAQG,QAAtC;AACD","file":"disabled.js","sourcesContent":["\n// Determine if an element is disabled (i.e. not editable)\n\nimport contextToElement from '../util/context-to-element';\nimport getParents from '../get/parents';\nimport isNativeDisabledSupported from './native-disabled-supported';\n\nimport _supports from '../supports/supports';\nlet supports;\n\nfunction isDisabledFieldset(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'fieldset' && element.disabled;\n}\n\nfunction isDisabledForm(element) {\n  const nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'form' && element.disabled;\n}\n\nexport default function(context) {\n  if (!supports) {\n    supports = _supports();\n  }\n\n  const element = contextToElement({\n    label: 'is/disabled',\n    context,\n  });\n\n  if (element.hasAttribute('data-ally-disabled')) {\n    // treat ally's element/disabled like the DOM native element.disabled\n    return true;\n  }\n\n  if (!isNativeDisabledSupported(element)) {\n    // non-form elements do not support the disabled attribute\n    return false;\n  }\n\n  if (element.disabled) {\n    // the element itself is disabled\n    return true;\n  }\n\n  const parents = getParents({context: element});\n  if (parents.some(isDisabledFieldset)) {\n    // a parental <fieldset> is disabld and inherits the state onto this element\n    return true;\n  }\n\n  if (!supports.focusFormDisabled && parents.some(isDisabledForm)) {\n    // a parental <form> is disabld and inherits the state onto this element\n    return true;\n  }\n\n  return false;\n}\n"]}