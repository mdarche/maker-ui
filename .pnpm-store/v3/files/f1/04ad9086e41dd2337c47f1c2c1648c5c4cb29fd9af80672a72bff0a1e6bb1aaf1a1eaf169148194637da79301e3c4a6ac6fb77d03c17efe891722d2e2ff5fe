{"version":3,"sources":["../../src/query/focusable.strict.js"],"names":["queryFocusableStrict","createFilter","condition","filter","node","shadowRoot","NodeFilter","FILTER_ACCEPT","FILTER_SKIP","acceptNode","PossiblyFocusableFilter","context","includeContext","includeOnlyTabbable","strategy","document","documentElement","_isFocusable","rules","except","onlyTabbable","_document","walker","createTreeWalker","SHOW_ELEMENT","list","nextNode","currentNode","push","concat","unshift"],"mappings":";;;;;;;;;;;;;;;;;;oBAgCwBA,oB;;;;;;;;;;;;;;AAxBxB,WAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/B;AACA,QAAMC,SAAS,SAATA,MAAS,CAASC,IAAT,EAAe;AAC5B,UAAIA,KAAKC,UAAT,EAAqB;AACnB;AACA;AACA,eAAOC,WAAWC,aAAlB;AACD;;AAED,UAAIL,UAAUE,IAAV,CAAJ,EAAqB;AACnB;AACA,eAAOE,WAAWC,aAAlB;AACD;;AAED,aAAOD,WAAWE,WAAlB;AACD,KAbD;AAcA;AACA;AACAL,WAAOM,UAAP,GAAoBN,MAApB;AACA,WAAOA,MAAP;AACD;AA3BD;AACA;;AA4BA,MAAMO,0BAA0BT,qCAAhC;;AAEe,WAASD,oBAAT,GAKP;AAAA,mFAAJ,EAAI;AAAA,QAJNW,OAIM,QAJNA,OAIM;AAAA,QAHNC,cAGM,QAHNA,cAGM;AAAA,QAFNC,mBAEM,QAFNA,mBAEM;AAAA,QADNC,QACM,QADNA,QACM;;AACN,QAAI,CAACH,OAAL,EAAc;AACZA,gBAAUI,SAASC,eAAnB;AACD;;AAED,QAAMC,eAAe,oBAAYC,KAAZ,CAAkBC,MAAlB,CAAyB;AAC5CC,oBAAcP;AAD8B,KAAzB,CAArB;;AAIA,QAAMQ,YAAY,2BAAYV,OAAZ,CAAlB;AACA;AACA,QAAMW,SAASD,UAAUE,gBAAV;AACb;AACAZ,WAFa;AAGb;AACAL,eAAWkB,YAJE;AAKb;AACAV,iBAAa,KAAb,GAAqBJ,uBAArB,GAA+CT,aAAagB,YAAb,CANlC;AAOb;AACA,SARa,CAAf;;AAWA,QAAIQ,OAAO,EAAX;;AAEA,WAAOH,OAAOI,QAAP,EAAP,EAA0B;AACxB,UAAIJ,OAAOK,WAAP,CAAmBtB,UAAvB,EAAmC;AACjC,YAAIY,aAAaK,OAAOK,WAApB,CAAJ,EAAsC;AACpCF,eAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;;AAEDF,eAAOA,KAAKI,MAAL,CAAY7B,qBAAqB;AACtCW,mBAASW,OAAOK,WAAP,CAAmBtB,UADU;AAEtCQ,kDAFsC;AAGtCC;AAHsC,SAArB,CAAZ,CAAP;AAKD,OAVD,MAUO;AACLW,aAAKG,IAAL,CAAUN,OAAOK,WAAjB;AACD;AACF;;AAED;AACA,QAAIf,cAAJ,EAAoB;AAClB,UAAIE,aAAa,KAAjB,EAAwB;AACtB,YAAI,6BAAgBH,OAAhB,CAAJ,EAA8B;AAC5Bc,eAAKK,OAAL,CAAanB,OAAb;AACD;AACF,OAJD,MAIO,IAAIM,aAAaN,OAAb,CAAJ,EAA2B;AAChCc,aAAKK,OAAL,CAAanB,OAAb;AACD;AACF;;AAED,WAAOc,IAAP;AACD","file":"focusable.strict.js","sourcesContent":["\n// https://www.w3.org/TR/html5/editing.html#focusable\n// https://www.w3.org/WAI/PF/aria-practices/#keyboard\n\nimport isFocusable from '../is/focusable';\nimport isFocusRelevant from '../is/focus-relevant';\nimport getDocument from '../util/get-document';\n\nfunction createFilter(condition) {\n  // see https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter\n  const filter = function(node) {\n    if (node.shadowRoot) {\n      // return ShadowRoot elements regardless of them being focusable,\n      // so they can be walked recursively later\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    if (condition(node)) {\n      // finds elements that could have been found by document.querySelectorAll()\n      return NodeFilter.FILTER_ACCEPT;\n    }\n\n    return NodeFilter.FILTER_SKIP;\n  };\n  // IE requires a function, Browsers require {acceptNode: function}\n  // see http://www.bennadel.com/blog/2607-finding-html-comment-nodes-in-the-dom-using-treewalker.htm\n  filter.acceptNode = filter;\n  return filter;\n}\n\nconst PossiblyFocusableFilter = createFilter(isFocusRelevant);\n\nexport default function queryFocusableStrict({\n  context,\n  includeContext,\n  includeOnlyTabbable,\n  strategy,\n} = {}) {\n  if (!context) {\n    context = document.documentElement;\n  }\n\n  const _isFocusable = isFocusable.rules.except({\n    onlyTabbable: includeOnlyTabbable,\n  });\n\n  const _document = getDocument(context);\n  // see https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker\n  const walker = _document.createTreeWalker(\n    // root element to start search in\n    context,\n    // element type filter\n    NodeFilter.SHOW_ELEMENT,\n    // custom NodeFilter filter\n    strategy === 'all' ? PossiblyFocusableFilter : createFilter(_isFocusable),\n    // deprecated, but IE requires it\n    false\n  );\n\n  let list = [];\n\n  while (walker.nextNode()) {\n    if (walker.currentNode.shadowRoot) {\n      if (_isFocusable(walker.currentNode)) {\n        list.push(walker.currentNode);\n      }\n\n      list = list.concat(queryFocusableStrict({\n        context: walker.currentNode.shadowRoot,\n        includeOnlyTabbable,\n        strategy,\n      }));\n    } else {\n      list.push(walker.currentNode);\n    }\n  }\n\n  // add context if requested and focusable\n  if (includeContext) {\n    if (strategy === 'all') {\n      if (isFocusRelevant(context)) {\n        list.unshift(context);\n      }\n    } else if (_isFocusable(context)) {\n      list.unshift(context);\n    }\n  }\n\n  return list;\n}\n"]}