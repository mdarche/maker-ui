{"version":3,"sources":["../../src/style/focus-source.js"],"names":["supportsFocusIn","document","focusEventName","blurEventName","interactionTypeHandler","shadowHandle","current","lock","used","pointer","key","script","initial","handleFocusEvent","event","source","type","interactionType","get","documentElement","setAttribute","getCurrentFocusSource","getUsedFocusSource","lockFocusSource","unlockFocusSource","disengage","Object","keys","forEach","removeEventListener","removeAttribute","engage","addEventListener","unlock"],"mappings":"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","file":"focus-source.js","sourcesContent":["\n/*\n  add data-focus-source attribute to html element containing \"key\", \"pointer\" or \"script\"\n  depending on the input method used to change focus.\n\n  USAGE:\n    style/focus-source()\n\n    body :focus {\n      outline: 1px solid grey;\n    }\n\n    html[data-focus-source=\"key\"] body :focus {\n      outline: 5px solid red;\n    }\n\n    html[data-focus-source=\"key\"] body :focus {\n      outline: 1px solid blue;\n    }\n\n  NOTE: I don't have a GamePad to test, if you do and you want to\n  implement an observer for https://w3c.github.io/gamepad/ - send a PR!\n\n  Alternate implementation: https://github.com/alice/modality\n*/\n\nimport { addClass, removeClass } from '../util/toggle-class';\nimport shadowFocus from '../event/shadow-focus';\nimport engageInteractionTypeObserver from '../observe/interaction-type';\nimport decorateService from '../util/decorate-service';\n\n// preferring focusin/out because they are synchronous in IE10+11\nconst supportsFocusIn = typeof document !== 'undefined' && 'onfocusin' in document;\nconst focusEventName = supportsFocusIn ? 'focusin' : 'focus';\nconst blurEventName = supportsFocusIn ? 'focusout' : 'blur';\n\n// interface to read interaction-type-listener state\nlet interactionTypeHandler;\nlet shadowHandle;\n// keep track of last focus source\nlet current = null;\n// overwrite focus source for use with the every upcoming focus event\nlet lock = null;\n// keep track of ever having used a particular input method to change focus\nconst used = {\n  pointer: false,\n  key: false,\n  script: false,\n  initial: false,\n};\n\nfunction handleFocusEvent(event) {\n  let source = '';\n  if (event.type === focusEventName || event.type === 'shadow-focus') {\n    const interactionType = interactionTypeHandler.get();\n    source = lock\n      || interactionType.pointer && 'pointer'\n      || interactionType.key && 'key'\n      || 'script';\n  } else if (event.type === 'initial') {\n    source = 'initial';\n  }\n\n  document.documentElement.setAttribute('data-focus-source', source);\n\n  if (event.type !== blurEventName) {\n    if (!used[source]) {\n      addClass(document.documentElement, 'focus-source-' + source);\n    }\n\n    used[source] = true;\n    current = source;\n  }\n}\n\nfunction getCurrentFocusSource() {\n  return current;\n}\n\nfunction getUsedFocusSource(source) {\n  return used[source];\n}\n\nfunction lockFocusSource(source) {\n  lock = source;\n}\n\nfunction unlockFocusSource() {\n  lock = false;\n}\n\nfunction disengage() {\n  // clear dom state\n  handleFocusEvent({type: blurEventName});\n  current = lock = null;\n  Object.keys(used).forEach(function(key) {\n    removeClass(document.documentElement, 'focus-source-' + key);\n    used[key] = false;\n  });\n  // kill interaction type identification listener\n  interactionTypeHandler.disengage();\n  // kill shadow-focus event dispatcher\n  shadowHandle && shadowHandle.disengage();\n  document.removeEventListener('shadow-focus', handleFocusEvent, true);\n  document.documentElement.removeEventListener(focusEventName, handleFocusEvent, true);\n  document.documentElement.removeEventListener(blurEventName, handleFocusEvent, true);\n  document.documentElement.removeAttribute('data-focus-source');\n}\n\nfunction engage() {\n  // enable the shadow-focus event dispatcher\n  shadowHandle = shadowFocus();\n  // handlers to modify the focused element\n  document.addEventListener('shadow-focus', handleFocusEvent, true);\n  document.documentElement.addEventListener(focusEventName, handleFocusEvent, true);\n  document.documentElement.addEventListener(blurEventName, handleFocusEvent, true);\n  // enable the interaction type identification observer\n  interactionTypeHandler = engageInteractionTypeObserver();\n  // set up initial dom state\n  handleFocusEvent({type: 'initial'});\n\n  return {\n    used: getUsedFocusSource,\n    current: getCurrentFocusSource,\n    lock: lockFocusSource,\n    unlock: unlockFocusSource,\n  };\n}\n\nexport default decorateService({ engage, disengage });\n"]}