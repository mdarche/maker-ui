{"version":3,"sources":["../../src/query/tabsequence.sort-shadowed.js"],"names":["getShadowHost","mergeInDomOrder","tabindexValue","Shadows","context","sortElements","hostCounter","inHost","inDocument","hosts","elements","host","_sortingId","parentHost","_registerHost","_registerHostParent","push","parent","element","filter","_registerElement","_elements","_injectHosts","_replaceHosts","_cleanup","Object","keys","forEach","_list","_context","shadowRoot","_merge","list","merged","resolveElement","_resolveHostElement","bind","_tabindex","concat","key","shadows","extractElements","length","sort"],"mappings":"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","file":"tabsequence.sort-shadowed.js","sourcesContent":["\nimport getShadowHost from '../get/shadow-host';\nimport mergeInDomOrder from '../util/merge-dom-order';\nimport tabindexValue from '../util/tabindex-value';\n\nclass Shadows {\n  constructor(context, sortElements) {\n    // document context we're working with\n    this.context = context;\n    // callback that sorts an array of elements\n    this.sortElements = sortElements;\n    // reference to create unique IDs for each ShadowHost\n    this.hostCounter = 1;\n    // reference map for child-ShadowHosts of a ShadowHost\n    this.inHost = {};\n    // reference map for child-ShadowHost of the document\n    this.inDocument = [];\n    // reference map for ShadowHosts\n    this.hosts = {};\n    // reference map for tabbable elements of a ShadowHost\n    this.elements = {};\n  }\n\n  // remember which hosts we have to sort within later\n  _registerHost(host) {\n    if (host._sortingId) {\n      return;\n    }\n\n    // make the ShadowHost identifiable (see cleanup() for undo)\n    host._sortingId = 'shadow-' + (this.hostCounter++);\n    this.hosts[host._sortingId] = host;\n\n    // hosts may contain other hosts\n    const parentHost = getShadowHost({context: host});\n    if (parentHost) {\n      this._registerHost(parentHost);\n      this._registerHostParent(host, parentHost);\n    } else {\n      this.inDocument.push(host);\n    }\n  }\n\n  // remember which host is the child of which other host\n  _registerHostParent(host, parent) {\n    if (!this.inHost[parent._sortingId]) {\n      this.inHost[parent._sortingId] = [];\n    }\n\n    this.inHost[parent._sortingId].push(host);\n  }\n\n  // remember which elements a host contains\n  _registerElement(element, host) {\n    if (!this.elements[host._sortingId]) {\n      this.elements[host._sortingId] = [];\n    }\n\n    this.elements[host._sortingId].push(element);\n  }\n\n  // remove shadowed elements from the sequence and register\n  // the ShadowHosts they belong to so we know what to sort\n  // later on\n  extractElements(elements) {\n    return elements.filter(function(element) {\n      const host = getShadowHost({ context: element });\n      if (!host) {\n        return true;\n      }\n\n      this._registerHost(host);\n      this._registerElement(element, host);\n      return false;\n    }, this);\n  }\n\n  // inject hosts into the sequence, sort everything,\n  // and recoursively replace hosts by its descendants\n  sort(elements) {\n    let _elements = this._injectHosts(elements);\n    _elements = this._replaceHosts(_elements);\n    this._cleanup();\n    return _elements;\n  }\n\n  // merge ShadowHosts into the element lists of other ShadowHosts\n  // or the document, then sort the individual lists\n  _injectHosts(elements) {\n    Object.keys(this.hosts).forEach(function(_sortingId) {\n      const _list = this.elements[_sortingId];\n      const _elements = this.inHost[_sortingId];\n      const _context = this.hosts[_sortingId].shadowRoot;\n      this.elements[_sortingId] = this._merge(_list, _elements, _context);\n    }, this);\n\n    return this._merge(elements, this.inDocument, this.context);\n  }\n\n  _merge(list, elements, context) {\n    const merged = mergeInDomOrder({\n      list,\n      elements,\n    });\n\n    return this.sortElements(merged, context);\n  }\n\n  _replaceHosts(elements) {\n    return mergeInDomOrder({\n      list: elements,\n      elements: this.inDocument,\n      resolveElement: this._resolveHostElement.bind(this),\n    });\n  }\n\n  _resolveHostElement(host) {\n    const merged = mergeInDomOrder({\n      list: this.elements[host._sortingId],\n      elements: this.inHost[host._sortingId],\n      resolveElement: this._resolveHostElement.bind(this),\n    });\n\n    const _tabindex = tabindexValue(host);\n    if (_tabindex !== null && _tabindex > -1) {\n      return [host].concat(merged);\n    }\n\n    return merged;\n  }\n\n  _cleanup() {\n    // remove those identifers we put on the ShadowHost to avoid using Map()\n    Object.keys(this.hosts).forEach(function(key) {\n      delete this.hosts[key]._sortingId;\n    }, this);\n  }\n}\n\nexport default function(elements, context, sortElements) {\n  const shadows = new Shadows(context, sortElements);\n  const _elements = shadows.extractElements(elements);\n\n  if (_elements.length === elements.length) {\n    // no shadowed content found, no need to continue\n    return sortElements(elements);\n  }\n\n  return shadows.sort(_elements);\n}\n"]}