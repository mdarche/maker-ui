{
	"id": 0,
	"name": "@maker-ui/layout",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 164,
			"name": "ColorButton",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 165,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						165
					]
				}
			]
		},
		{
			"id": 128,
			"name": "Content",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 129,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						129
					]
				}
			]
		},
		{
			"id": 156,
			"name": "Footer",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 157,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						157
					]
				}
			]
		},
		{
			"id": 113,
			"name": "Header",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 114,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						114
					]
				}
			]
		},
		{
			"id": 99,
			"name": "Layout",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 100,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						100
					]
				}
			]
		},
		{
			"id": 135,
			"name": "Main",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 136,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						136
					]
				}
			]
		},
		{
			"id": 120,
			"name": "Navbar",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 121,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						121
					]
				}
			]
		},
		{
			"id": 142,
			"name": "SideNav",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 143,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						143
					]
				}
			]
		},
		{
			"id": 149,
			"name": "Sidebar",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 150,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						150
					]
				}
			]
		},
		{
			"id": 106,
			"name": "Topbar",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {},
			"children": [
				{
					"id": 107,
					"name": "displayName",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						107
					]
				}
			]
		},
		{
			"id": 52,
			"name": "merge",
			"kind": 4,
			"kindString": "Namespace",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 61,
					"name": "Options",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExternal": true
					},
					"children": [
						{
							"id": 67,
							"name": "clone",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/deepmerge/index.d.ts",
									"line": 7,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 62,
							"name": "arrayMerge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 63,
									"name": "arrayMerge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 64,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 65,
											"name": "source",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										},
										{
											"id": 66,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 61,
												"qualifiedName": "deepmerge.Options",
												"package": "deepmerge",
												"name": "Options"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								}
							]
						},
						{
							"id": 68,
							"name": "customMerge",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/deepmerge/index.d.ts",
									"line": 8,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 69,
									"name": "customMerge",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 70,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 71,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 61,
												"qualifiedName": "deepmerge.Options",
												"package": "deepmerge",
												"name": "Options"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 72,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 73,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 74,
																	"name": "x",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 75,
																	"name": "y",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										]
									}
								}
							]
						},
						{
							"id": 76,
							"name": "isMergeableObject",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"signatures": [
								{
									"id": 77,
									"name": "isMergeableObject",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isExternal": true
									},
									"parameters": [
										{
											"id": 78,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								67
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								62,
								68,
								76
							]
						}
					],
					"sources": [
						{
							"fileName": "node_modules/deepmerge/index.d.ts",
							"line": 5,
							"character": 18
						}
					]
				},
				{
					"id": 53,
					"name": "all",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/deepmerge/index.d.ts",
							"line": 12,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 54,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 55,
									"name": "objects",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "object"
										}
									}
								},
								{
									"id": 56,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 61,
										"qualifiedName": "deepmerge.Options",
										"package": "deepmerge",
										"name": "Options"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "object"
							}
						},
						{
							"id": 57,
							"name": "all",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 58,
									"name": "T",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									}
								}
							],
							"parameters": [
								{
									"id": 59,
									"name": "objects",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"id": 58,
													"qualifiedName": "T",
													"package": "deepmerge",
													"name": "T"
												}
											],
											"qualifiedName": "Partial",
											"package": "typescript",
											"name": "Partial"
										}
									}
								},
								{
									"id": 60,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"id": 61,
										"qualifiedName": "deepmerge.Options",
										"package": "deepmerge",
										"name": "Options"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 58,
								"qualifiedName": "T",
								"package": "deepmerge",
								"name": "T"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						61
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						53
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/deepmerge/index.d.ts",
					"line": 4,
					"character": 18
				}
			]
		},
		{
			"id": 180,
			"name": "ErrorBoundary",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Use the `ErrorBoundary` to wrap your component with a fallback UI for\nerrors in production. You can use a custom logFunction or supply one to MakerOptions.",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/error-boundary\n"
					}
				]
			},
			"children": [
				{
					"id": 188,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 189,
							"name": "new ErrorBoundary",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"parameters": [
								{
									"id": 190,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "ErrorProps"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ErrorProps"
													}
												],
												"qualifiedName": "Readonly",
												"package": "typescript",
												"name": "Readonly"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 180,
								"name": "ErrorBoundary"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component<ErrorProps, ErrorState>.constructor"
							}
						},
						{
							"id": 191,
							"name": "new ErrorBoundary",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"tags": [
									{
										"tag": "deprecated",
										"text": ""
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/docs/legacy-context.html\n"
									}
								]
							},
							"parameters": [
								{
									"id": 192,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ErrorProps"
									}
								},
								{
									"id": 193,
									"name": "context",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 180,
								"name": "ErrorBoundary"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component<ErrorProps, ErrorState>.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component<ErrorProps, ErrorState>.constructor"
					}
				},
				{
					"id": 205,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
						"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
						"tags": [
							{
								"tag": "see",
								"text": "https://reactjs.org/docs/context.html\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 472,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.context"
					}
				},
				{
					"id": 222,
					"name": "props",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 497,
							"character": 17
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "ErrorProps"
									}
								],
								"qualifiedName": "Readonly",
								"package": "typescript",
								"name": "Readonly"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 223,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 224,
													"name": "children",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isExternal": true,
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/react/index.d.ts",
															"line": 497,
															"character": 49
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														224
													]
												}
											]
										}
									}
								],
								"qualifiedName": "Readonly",
								"package": "typescript",
								"name": "Readonly"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.props"
					}
				},
				{
					"id": 225,
					"name": "refs",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true
					},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 503,
							"character": 8
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 226,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 227,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 228,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"qualifiedName": "React.ReactInstance",
									"package": "@types/react",
									"name": "ReactInstance"
								}
							}
						}
					},
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.refs"
					}
				},
				{
					"id": 194,
					"name": "state",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
							"line": 52,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 195,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 196,
									"name": "error",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 197,
									"name": "errorInfo",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "''"
								},
								{
									"id": 198,
									"name": "hasError",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										196,
										197,
										198
									]
								}
							]
						}
					},
					"defaultValue": "...",
					"overwrites": {
						"type": "reference",
						"name": "React.Component.state"
					}
				},
				{
					"id": 181,
					"name": "contextType",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
							"line": 50,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 272,
										"name": "MakerOptions"
									}
								],
								"qualifiedName": "Partial",
								"package": "typescript",
								"name": "Partial"
							}
						],
						"qualifiedName": "React.Context",
						"package": "@types/react",
						"name": "Context"
					},
					"defaultValue": "OptionContext",
					"overwrites": {
						"type": "reference",
						"name": "React.Component.contextType"
					}
				},
				{
					"id": 249,
					"name": "UNSAFE_componentWillMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 250,
							"name": "UNSAFE_componentWillMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
								"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use componentDidMount or the constructor instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.UNSAFE_componentWillMount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.UNSAFE_componentWillMount"
					}
				},
				{
					"id": 255,
					"name": "UNSAFE_componentWillReceiveProps",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 256,
							"name": "UNSAFE_componentWillReceiveProps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
								"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use static getDerivedStateFromProps instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 257,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 258,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.UNSAFE_componentWillReceiveProps"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.UNSAFE_componentWillReceiveProps"
					}
				},
				{
					"id": 264,
					"name": "UNSAFE_componentWillUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 265,
							"name": "UNSAFE_componentWillUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
								"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use getSnapshotBeforeUpdate instead"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 266,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 267,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorState"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 268,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.UNSAFE_componentWillUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.UNSAFE_componentWillUpdate"
					}
				},
				{
					"id": 199,
					"name": "componentDidCatch",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
							"line": 62,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 200,
							"name": "componentDidCatch",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 201,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 202,
									"name": "errorInfo",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"name": "React.Component.componentDidCatch"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "React.Component.componentDidCatch"
					}
				},
				{
					"id": 229,
					"name": "componentDidMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 230,
							"name": "componentDidMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentDidMount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentDidMount"
					}
				},
				{
					"id": 242,
					"name": "componentDidUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 243,
							"name": "componentDidUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately after updating occurs. Not called for the initial render.",
								"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
							},
							"parameters": [
								{
									"id": 244,
									"name": "prevProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 245,
									"name": "prevState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorState"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 246,
									"name": "snapshot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentDidUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentDidUpdate"
					}
				},
				{
					"id": 247,
					"name": "componentWillMount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 248,
							"name": "componentWillMount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
								"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentWillMount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentWillMount"
					}
				},
				{
					"id": 251,
					"name": "componentWillReceiveProps",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 252,
							"name": "componentWillReceiveProps",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
								"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 253,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 254,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentWillReceiveProps"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentWillReceiveProps"
					}
				},
				{
					"id": 236,
					"name": "componentWillUnmount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 237,
							"name": "componentWillUnmount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentWillUnmount"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentWillUnmount"
					}
				},
				{
					"id": 259,
					"name": "componentWillUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 260,
							"name": "componentWillUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
								"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
								"tags": [
									{
										"tag": "deprecated",
										"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
									},
									{
										"tag": "see",
										"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
									}
								]
							},
							"parameters": [
								{
									"id": 261,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 262,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorState"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 263,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.componentWillUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.componentWillUpdate"
					}
				},
				{
					"id": 217,
					"name": "forceUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 489,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 218,
							"name": "forceUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 219,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 220,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 221,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.forceUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.forceUpdate"
					}
				},
				{
					"id": 238,
					"name": "getSnapshotBeforeUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 239,
							"name": "getSnapshotBeforeUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
								"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
							},
							"parameters": [
								{
									"id": 240,
									"name": "prevProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 241,
									"name": "prevState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorState"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.getSnapshotBeforeUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.getSnapshotBeforeUpdate"
					}
				},
				{
					"id": 203,
					"name": "render",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
							"line": 73,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "render",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"overwrites": {
								"type": "reference",
								"name": "React.Component.render"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"name": "React.Component.render"
					}
				},
				{
					"id": 206,
					"name": "setState",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@types/react/index.d.ts",
							"line": 484,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 207,
							"name": "setState",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"typeParameter": [
								{
									"id": 208,
									"name": "K",
									"kind": 131072,
									"kindString": "Type parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "typeOperator",
										"operator": "keyof",
										"target": {
											"type": "reference",
											"name": "ErrorState"
										}
									}
								}
							],
							"parameters": [
								{
									"id": 209,
									"name": "state",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"name": "ErrorState"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 210,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExternal": true
													},
													"signatures": [
														{
															"id": 211,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {
																"isExternal": true
															},
															"parameters": [
																{
																	"id": 212,
																	"name": "prevState",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "ErrorState"
																			}
																		],
																		"qualifiedName": "Readonly",
																		"package": "typescript",
																		"name": "Readonly"
																	}
																},
																{
																	"id": 213,
																	"name": "props",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isExternal": true
																	},
																	"type": {
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "ErrorProps"
																			}
																		],
																		"qualifiedName": "Readonly",
																		"package": "typescript",
																		"name": "Readonly"
																	}
																}
															],
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": null
																	},
																	{
																		"type": "reference",
																		"name": "ErrorState"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"name": "ErrorState"
																			},
																			{
																				"type": "reference",
																				"id": 208,
																				"qualifiedName": "K",
																				"package": "@types/react",
																				"name": "K"
																			}
																		],
																		"qualifiedName": "Pick",
																		"package": "typescript",
																		"name": "Pick"
																	}
																]
															}
														}
													]
												}
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ErrorState"
													},
													{
														"type": "reference",
														"id": 208,
														"qualifiedName": "K",
														"package": "@types/react",
														"name": "K"
													}
												],
												"qualifiedName": "Pick",
												"package": "typescript",
												"name": "Pick"
											}
										]
									}
								},
								{
									"id": 214,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 215,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExternal": true
											},
											"signatures": [
												{
													"id": 216,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {
														"isExternal": true
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.setState"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.setState"
					}
				},
				{
					"id": 231,
					"name": "shouldComponentUpdate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"signatures": [
						{
							"id": 232,
							"name": "shouldComponentUpdate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"comment": {
								"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
								"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
							},
							"parameters": [
								{
									"id": 233,
									"name": "nextProps",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorProps"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 234,
									"name": "nextState",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ErrorState"
											}
										],
										"qualifiedName": "Readonly",
										"package": "typescript",
										"name": "Readonly"
									}
								},
								{
									"id": 235,
									"name": "nextContext",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "React.Component.shouldComponentUpdate"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"name": "React.Component.shouldComponentUpdate"
					}
				},
				{
					"id": 182,
					"name": "getDerivedStateFromError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
							"line": 58,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 183,
							"name": "getDerivedStateFromError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 184,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 185,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 186,
											"name": "error",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 187,
											"name": "hasError",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"defaultValue": "true"
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												186,
												187
											]
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						188
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						205,
						222,
						225,
						194,
						181
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						249,
						255,
						264,
						199,
						229,
						242,
						247,
						251,
						236,
						259,
						217,
						238,
						203,
						206,
						231,
						182
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/layout/src/components/Errors/ErrorBoundary.tsx",
					"line": 49,
					"character": 13
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"typeArguments": [
						{
							"type": "reference",
							"name": "ErrorProps"
						},
						{
							"type": "reference",
							"name": "ErrorState"
						}
					],
					"qualifiedName": "React.Component",
					"package": "@types/react",
					"name": "Component"
				}
			]
		},
		{
			"id": 79,
			"name": "ResizeObserver",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isExternal": true
			},
			"children": [
				{
					"id": 82,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
							"line": 4,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 83,
							"name": "new ResizeObserver",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 84,
									"name": "callback",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "ResizeObserverCallback",
										"package": "@juggle/resize-observer",
										"name": "ResizeObserverCallback"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 79,
								"qualifiedName": "ResizeObserver",
								"package": "@juggle/resize-observer",
								"name": "ResizeObserver"
							}
						}
					]
				},
				{
					"id": 92,
					"name": "disconnect",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
							"line": 7,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 93,
							"name": "disconnect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 85,
					"name": "observe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
							"line": 5,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 86,
							"name": "observe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 87,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Element",
										"package": "typescript",
										"name": "Element"
									}
								},
								{
									"id": 88,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true,
										"isOptional": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "ResizeObserverOptions",
										"package": "@juggle/resize-observer",
										"name": "ResizeObserverOptions"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 89,
					"name": "unobserve",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
							"line": 6,
							"character": 4
						}
					],
					"signatures": [
						{
							"id": 90,
							"name": "unobserve",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"parameters": [
								{
									"id": 91,
									"name": "target",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExternal": true
									},
									"type": {
										"type": "reference",
										"qualifiedName": "Element",
										"package": "typescript",
										"name": "Element"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 80,
					"name": "toString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true,
						"isExternal": true
					},
					"sources": [
						{
							"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
							"line": 8,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "toString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						82
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						92,
						85,
						89,
						80
					]
				}
			],
			"sources": [
				{
					"fileName": "node_modules/@juggle/resize-observer/lib/ResizeObserver.d.ts",
					"line": 3,
					"character": 14
				}
			]
		},
		{
			"id": 272,
			"name": "MakerOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "/**\nConfiguration for the Maker UI layout system.",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/maker-ui-options\n\n"
					}
				]
			},
			"children": [
				{
					"id": 388,
					"name": "a11y",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for Maker UI accessibility settings."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 531,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 389,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 390,
									"name": "skiplinks",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Adds native skiplink support to the root of your layout. Setting this value\nto false is NOT recommended.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 537,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										390
									]
								}
							]
						}
					}
				},
				{
					"id": 273,
					"name": "breakpoints",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "An array of browser widths that is used as the default breakpoints for\nall nested Maker UI components and primitives.",
						"tags": [
							{
								"tag": "default",
								"text": "['768px', '960px', '1440px']\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 99,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "union",
							"types": [
								{
									"type": "intrinsic",
									"name": "string"
								},
								{
									"type": "intrinsic",
									"name": "number"
								}
							]
						}
					}
				},
				{
					"id": 275,
					"name": "colors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Your site's default colors that are mapped to CSS variables.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\n- Maker UI uses a few predefined values for its layout components, but\nyou can add as many custom keys as you would like. They will be available\nas CSS variables: `var(--color-<key>)`\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 118,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ThemeColors"
					}
				},
				{
					"id": 372,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI content area."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 459,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 373,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 376,
									"name": "breakpoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A specific breakpoint that controls when the grid for main content, sidebars, and the\nside nav breaks down for mobile. You may also use an index to access a specific breakpoint\nin the `options.breakpoints` array.",
										"tags": [
											{
												"tag": "default",
												"text": "0 (breakpoints[0], or 768px)\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 479,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 377,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the main content area",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 484,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 374,
									"name": "maxWidth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The max-width of the <main> tag content. Can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "1020\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 464,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								},
								{
									"id": 375,
									"name": "maxWidthSection",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The max-width of all nested <Section /> components. Can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "1020\n"
											},
											{
												"tag": "remarks",
												"text": "To use sections with full-width backgrounds, make sure `content.maxWidth`\nis set to `100%' and use this setting to control the content's max-width.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 472,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										376,
										377,
										374,
										375
									]
								}
							]
						}
					}
				},
				{
					"id": 391,
					"name": "errors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for Maker UI error boundaries."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 542,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 392,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 399,
									"name": "errorMessage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you easily add custom error components to each section of Maker UI's layout."
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 557,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 400,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 404,
													"name": "content",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the Content component."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 565,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 407,
													"name": "footer",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the Footer."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 571,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 402,
													"name": "header",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the Header."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 561,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 403,
													"name": "mobileMenu",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the MobileMenu."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 563,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 408,
													"name": "section",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in a Section component."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 573,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 405,
													"name": "sideNav",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the SideNav."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 567,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 406,
													"name": "sidebar",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the Sidebar."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 569,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												},
												{
													"id": 401,
													"name": "topbar",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"comment": {
														"shortText": "Custom component that displays for any error nested in the Topbar."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 559,
															"character": 6
														}
													],
													"type": {
														"type": "reference",
														"qualifiedName": "React.ReactNode",
														"package": "@types/react",
														"name": "ReactNode"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														404,
														407,
														402,
														403,
														408,
														405,
														406,
														401
													]
												}
											]
										}
									}
								},
								{
									"id": 398,
									"name": "showStackTrace",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Renders the error's stack trace in the error message. This is helpful for development\nbut not recommended for production.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 553,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 393,
									"name": "logFunction",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 394,
											"name": "logFunction",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "A callback function that executes any time a Maker UI error boundary\nis activated in production. Perfect for custom error monitoring or logging services."
											},
											"parameters": [
												{
													"id": 395,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 396,
													"name": "errorDetails",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "object"
													}
												},
												{
													"id": 397,
													"name": "component",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										399,
										398
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										393
									]
								}
							]
						}
					}
				},
				{
					"id": 274,
					"name": "fonts",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Your site's default fonts that are mapped to CSS variables.",
						"tags": [
							{
								"tag": "remarks",
								"text": "\n- Make sure to add the font to your website by self hosting\nor connecting to Google Fonts, Adobe Fonts, or another type foundry.\n- You can add as many custom keys as you would like. They will all be available\nas CSS variables: `var(--font-<key>)`\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 109,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"name": "ThemeFonts"
					}
				},
				{
					"id": 384,
					"name": "footer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI footer."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 516,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 385,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 387,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the Footer container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 526,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 386,
									"name": "maxWidth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The max-width of the layout's footer content. Can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "1020\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 521,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										387,
										386
									]
								}
							]
						}
					}
				},
				{
					"id": 300,
					"name": "header",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI header."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 188,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 301,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 305,
									"name": "absolute",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines if the header should be absolutely positioned so site content\nbegins at the top of the viewport.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											},
											{
												"tag": "remark",
												"text": "\n- This is helpful for transparent headers.\n- If you only want this effect on certain pages, conditionally set it via\nthe Header component's `absolute` prop in your Layout.\n- When true, all of the sticky settings will use absolute / fixed positioning instead of\nsticky / relative positioning.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 216,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 334,
									"name": "breakpoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A specific breakpoint that controls when the header switches from desktop navigation\nto mobile navigation. You may also use an index to access a specific breakpoint in\nthe `options.breakpoints` array.",
										"tags": [
											{
												"tag": "default",
												"text": "0 (breakpoints[0], or 768px)\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 309,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 329,
									"name": "colorButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you customize the header's color toggle. By default, it prints the name of the current\ncolor mode, but you can use a custom React component or a JSX callback to animate the icon's\nstate."
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 299,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "React.ReactNode",
												"package": "@types/react",
												"name": "ReactNode"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 330,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 331,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 332,
																	"name": "currentMode",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 333,
																	"name": "attributes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "object"
																	}
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "React.ReactNode",
																"package": "@types/react",
																"name": "ReactNode"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 319,
									"name": "dropdown",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Controls the header's default dropdown menu settings."
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 267,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 320,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 321,
													"name": "caret",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "A boolean that displays the default caret or a React Element that lets you\nuse a custom caret component.",
														"tags": [
															{
																"tag": "default",
																"text": "'default'\n"
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 273,
															"character": 6
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "boolean"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	},
																	{
																		"type": "union",
																		"types": [
																			{
																				"type": "intrinsic",
																				"name": "string"
																			},
																			{
																				"type": "reference",
																				"typeArguments": [
																					{
																						"type": "intrinsic",
																						"name": "any"
																					}
																				],
																				"qualifiedName": "React.JSXElementConstructor",
																				"package": "@types/react",
																				"name": "JSXElementConstructor"
																			}
																		]
																	}
																],
																"qualifiedName": "React.ReactElement",
																"package": "@types/react",
																"name": "ReactElement"
															},
															{
																"type": "literal",
																"value": "default"
															}
														]
													}
												},
												{
													"id": 322,
													"name": "transition",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The transition animation for showing/hiding header dropdown menus on hover or focus.",
														"tags": [
															{
																"tag": "default",
																"text": "'fade'\n"
															}
														]
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 278,
															"character": 6
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "none"
															},
															{
																"type": "literal",
																"value": "scale"
															},
															{
																"type": "literal",
																"value": "fade"
															},
															{
																"type": "literal",
																"value": "fade-down"
															},
															{
																"type": "literal",
																"value": "fade-up"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														321,
														322
													]
												}
											]
										}
									}
								},
								{
									"id": 335,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the Header container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 314,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 304,
									"name": "maxWidth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The max-width of the header's content container. Can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "1460\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 203,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								},
								{
									"id": 324,
									"name": "menuButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you customize the mobile menu toggle. By default, it uses a traditional hamburger\nicon, but you can use a custom React component or a JSX callback to animate the icon's state."
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 290,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "React.ReactNode",
												"package": "@types/react",
												"name": "ReactNode"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 325,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 326,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 327,
																	"name": "isOpen",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 328,
																	"name": "attributes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "object"
																	}
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "React.ReactNode",
																"package": "@types/react",
																"name": "ReactNode"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 323,
									"name": "menuOverflow",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Lets you decide if your nav menu should wrap to the next line or scroll horizontally\nwhen the menu is larger than its container width.",
										"tags": [
											{
												"tag": "default",
												"text": "'wrap'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 285,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "wrap"
											},
											{
												"type": "literal",
												"value": "scroll"
											}
										]
									}
								},
								{
									"id": 303,
									"name": "mobileNavType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The Navbar's layout on mobile devices.",
										"tags": [
											{
												"tag": "default",
												"text": "'basic'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 198,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "basic"
											},
											{
												"type": "literal",
												"value": "basic-menu-left"
											},
											{
												"type": "literal",
												"value": "logo-center"
											},
											{
												"type": "literal",
												"value": "logo-center-alt"
											}
										]
									}
								},
								{
									"id": 302,
									"name": "navType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The Navbar's layout on desktop.",
										"tags": [
											{
												"tag": "default",
												"text": "'basic'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 193,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "basic"
											},
											{
												"type": "literal",
												"value": "basic-left"
											},
											{
												"type": "literal",
												"value": "basic-center"
											},
											{
												"type": "literal",
												"value": "center"
											},
											{
												"type": "literal",
												"value": "split"
											},
											{
												"type": "literal",
												"value": "minimal"
											},
											{
												"type": "literal",
												"value": "minimal-left"
											},
											{
												"type": "literal",
												"value": "minimal-center"
											},
											{
												"type": "literal",
												"value": "reverse"
											}
										]
									}
								},
								{
									"id": 312,
									"name": "scrollClass",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Adds a custom class to the header when the user has scrolled past a specified point.\n\\"
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 242,
											"character": 4
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 313,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 315,
													"name": "className",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The target class selector."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 246,
															"character": 6
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 314,
													"name": "scrollTop",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"comment": {
														"shortText": "The scrollTop value that triggers adding or removing a class (in pixels)."
													},
													"sources": [
														{
															"fileName": "packages/layout/src/types.ts",
															"line": 244,
															"character": 6
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														315,
														314
													]
												}
											]
										}
									}
								},
								{
									"id": 316,
									"name": "showColorButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines whether the header nav area displays a color toggle button.",
										"tags": [
											{
												"tag": "default",
												"text": "true (only appears if multiple color modes are present)\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 252,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 317,
									"name": "showColorButtonOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Lets you hide the header's color toggle button on mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 257,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 318,
									"name": "showWidgetsOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Hides the header nav area on mobile (typically containing search, social icons,\nor other custom components).",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 263,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 306,
									"name": "sticky",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines if the header sticks to the top of the viewport while scrolling.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 221,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 307,
									"name": "stickyOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines if the header sticks to the top of the viewport on mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 226,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 308,
									"name": "stickyUpScroll",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Hides the sticky header on down scroll and reveals when scrolling back up.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 231,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 309,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 310,
															"name": "delay",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "Determines the number of milliseconds that should pass before the nav is triggered back into view on up-scroll"
															},
															"sources": [
																{
																	"fileName": "packages/layout/src/types.ts",
																	"line": 235,
																	"character": 10
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														},
														{
															"id": 311,
															"name": "start",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"comment": {
																"shortText": "The scroll distance (in pixels) from the top of the document where the effect should begin  @default 500"
															},
															"sources": [
																{
																	"fileName": "packages/layout/src/types.ts",
																	"line": 237,
																	"character": 10
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																310,
																311
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										305,
										334,
										329,
										319,
										335,
										304,
										324,
										323,
										303,
										302,
										312,
										316,
										317,
										318,
										306,
										307,
										308
									]
								}
							]
						}
					}
				},
				{
					"id": 336,
					"name": "mobileMenu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI mobile menu."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 319,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 337,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 341,
									"name": "closeButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you customize the mobile menu's close button. By default, it displays an 'X' icon,\nbut you can use a custom React component or a JSX callback to animate the icon's state."
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 340,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "React.ReactNode",
												"package": "@types/react",
												"name": "ReactNode"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 342,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 343,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 344,
																	"name": "isOpen",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 345,
																	"name": "attributes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "object"
																	}
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "React.ReactNode",
																"package": "@types/react",
																"name": "ReactNode"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 347,
									"name": "closeOnBlur",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Closes the mobile menu when the user clicks outside the menu.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											},
											{
												"tag": "remarks",
												"text": "Only useful for `slide-left` and `slide-right` transition types when\nthe width is less than 100% or 100vw\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 356,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 348,
									"name": "closeOnRouteChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Closes the mobile menu when the user selects a menu item and navigates to a\nnew route.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 362,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 349,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the MobileMenu container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 367,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 346,
									"name": "showCloseButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Displays a close button in the mobile menu.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 348,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 339,
									"name": "transition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The transition style for the mobile menu when a user clicks the header's\nmobile menu button.",
										"tags": [
											{
												"tag": "default",
												"text": "'slide-left'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 330,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "fade"
											},
											{
												"type": "literal",
												"value": "fade-down"
											},
											{
												"type": "literal",
												"value": "fade-up"
											},
											{
												"type": "literal",
												"value": "slide-left"
											},
											{
												"type": "literal",
												"value": "slide-right"
											}
										]
									}
								},
								{
									"id": 340,
									"name": "visibleOnDesktop",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Displays the header's mobile menu button at all times.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 335,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 338,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The width of the mobile menu when active. This can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "'70vw'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 324,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										341,
										347,
										348,
										349,
										346,
										339,
										340,
										338
									]
								}
							]
						}
					}
				},
				{
					"id": 276,
					"name": "persistentColorMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "An option that lets you save the user's color mode preference to the browser's local storage."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 122,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 277,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 279,
											"name": "expiration",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "packages/layout/src/types.ts",
													"line": 122,
													"character": 48
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 278,
											"name": "key",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "packages/layout/src/types.ts",
													"line": 122,
													"character": 35
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												279,
												278
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 350,
					"name": "sideNav",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI side navigation bar."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 372,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 351,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 370,
									"name": "breakpoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A specific breakpoint that controls when the grid for main content, sidebars, and the\nside nav breaks down for mobile. You may also use an index to access a specific breakpoint\nin the `options.breakpoints` array.",
										"tags": [
											{
												"tag": "default",
												"text": "0 (breakpoints[0], or 768px)\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 449,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 356,
									"name": "closeOnBlur",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Closes the side nav on mobile when the user clicks outside the menu.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 400,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 357,
									"name": "closeOnRouteChange",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Closes the side nav when the user selects a menu item and navigates to a\nnew route.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 406,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 364,
									"name": "collapse",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A boolean that lets you collapse Maker UI's SideNav.",
										"tags": [
											{
												"tag": "remark",
												"text": "Please note that this option does not currently use a performant\n`transform` transition. It transitions the `margin-left` and `margin-right`\nCSS attributes to maintain the content area's width."
											},
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 431,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 365,
									"name": "collapseButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you customize the side nav collapse toggle button. By default, it displays a button\nwith `open` or `close` inner text, but you can use a custom React component or a JSX\ncallback to animate the button's state.",
										"tags": [
											{
												"tag": "remark",
												"text": "You can also customize this component as a prop on `<SideNav />`"
											},
											{
												"tag": "default",
												"text": "'default'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 439,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "React.ReactNode",
												"package": "@types/react",
												"name": "ReactNode"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 366,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 367,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 368,
																	"name": "isOpen",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 369,
																	"name": "attributes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "object"
																	}
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "React.ReactNode",
																"package": "@types/react",
																"name": "ReactNode"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 353,
									"name": "cssTransition",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The CSS `transition` property that controls how the side nav enters and exits\nthe viewport on mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "'transform ease 0.3s'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 383,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 371,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the SideNav container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 454,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 354,
									"name": "isHeader",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Determines if the side nav should be rendered as a <header> tag. Don't use this if\nyou also use a <Header> component in your layout.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 389,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 355,
									"name": "isPrimaryMobileNav",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Lets you connect the side nav to the header's mobile menu button istead of\nactivating the mobile menu component. This behavior is only for mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 395,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 358,
									"name": "showToggleOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "Adds a floating toggle to the viewport that lets you open / close the side nav\non mobile screens.",
										"tags": [
											{
												"tag": "default",
												"text": "true\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 412,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 359,
									"name": "toggleButton",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Lets you customize the side nav floating toggle button. By default,\nit displays a button with `open` or `close` inner text, but you can use a custom React\ncomponent or a JSX callback to animate the button's state.",
										"tags": [
											{
												"tag": "default",
												"text": "'default'\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 419,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"qualifiedName": "React.ReactNode",
												"package": "@types/react",
												"name": "ReactNode"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 360,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 361,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 362,
																	"name": "isOpen",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "boolean"
																	}
																},
																{
																	"id": 363,
																	"name": "attributes",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "object"
																	}
																}
															],
															"type": {
																"type": "reference",
																"qualifiedName": "React.ReactNode",
																"package": "@types/react",
																"name": "ReactNode"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"id": 352,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The width of the side navigation bar.",
										"tags": [
											{
												"tag": "default",
												"text": "[250, 300]\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 377,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										370,
										356,
										357,
										364,
										365,
										353,
										371,
										354,
										355,
										358,
										359,
										352
									]
								}
							]
						}
					}
				},
				{
					"id": 378,
					"name": "sidebar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI sidebar."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 489,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 379,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 383,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the Sidebar container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 511,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 382,
									"name": "sidebarGap",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The width of the gap between the main content area and optional sidebars.\nCan be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "30\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 506,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								},
								{
									"id": 380,
									"name": "width",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The width of the primary sidebar.",
										"tags": [
											{
												"tag": "default",
												"text": "300\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 494,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								},
								{
									"id": 381,
									"name": "width_2",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The width of the secondary sidebar. In `sidebar content sidebar` layouts, this\nvalue always determines the second (right-hand) sidebar width.",
										"tags": [
											{
												"tag": "default",
												"text": "200\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 500,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										383,
										382,
										380,
										381
									]
								}
							]
						}
					}
				},
				{
					"id": 292,
					"name": "topbar",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Configuration object for the Maker UI topbar."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 150,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 293,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 298,
									"name": "breakpoint",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "A specific breakpoint that determines when the topbar is visible. You may also use an index\nto access a specific breakpoint in the `options.breakpoints` array.",
										"tags": [
											{
												"tag": "default",
												"text": "0 (breakpoints[0], or 768px)\n"
											},
											{
												"tag": "remark",
												"text": "This is only helpful if `hideOnMobile` is true.\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 178,
											"character": 4
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								},
								{
									"id": 299,
									"name": "errorBoundary",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "An option to add an optional error boundary to the Topbar container",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 183,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 297,
									"name": "hideOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Determines if the topbar is visible on mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 170,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 294,
									"name": "maxWidth",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "The max-width of the topbar's content container. Can be a responsive array.",
										"tags": [
											{
												"tag": "default",
												"text": "1260\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 155,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"name": "ResponsiveScale"
									}
								},
								{
									"id": 295,
									"name": "sticky",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Determines if the topbar sticks to the top of the viewport while scrolling.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 160,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								},
								{
									"id": 296,
									"name": "stickyOnMobile",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "Determines if the header sticks to the top of the viewport on mobile.",
										"tags": [
											{
												"tag": "default",
												"text": "false\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "packages/layout/src/types.ts",
											"line": 165,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										298,
										299,
										297,
										294,
										295,
										296
									]
								}
							]
						}
					}
				},
				{
					"id": 280,
					"name": "useColorDefaults",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A boolean that lets you turn off Maker UI's default color CSS variables."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 126,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 281,
					"name": "useMeasurementDefaults",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A boolean that lets you turn off Maker UI's default measurement CSS variables."
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 130,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 282,
					"name": "variables",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "A dictionary of custom CSS variable objects"
					},
					"sources": [
						{
							"fileName": "packages/layout/src/types.ts",
							"line": 134,
							"character": 2
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 283,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"indexSignature": {
								"id": 284,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 285,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "reference",
									"name": "ResponsiveScale"
								}
							}
						}
					}
				},
				{
					"id": 286,
					"name": "linkFunction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isOptional": true
					},
					"signatures": [
						{
							"id": 287,
							"name": "linkFunction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "A JSX callback function that lets you wrap your framework's local\nLink or Route component around all native Maker UI anchor tags."
							},
							"parameters": [
								{
									"id": 288,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 289,
									"name": "children",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"qualifiedName": "React.JSXElementConstructor",
																"package": "@types/react",
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"qualifiedName": "React.ReactElement",
												"package": "@types/react",
												"name": "ReactElement"
											}
										]
									}
								},
								{
									"id": 290,
									"name": "attributes",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "object"
									}
								},
								{
									"id": 291,
									"name": "icon",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"qualifiedName": "React.JSXElementConstructor",
																"package": "@types/react",
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"qualifiedName": "React.ReactElement",
												"package": "@types/react",
												"name": "ReactElement"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"qualifiedName": "React.JSXElementConstructor",
												"package": "@types/react",
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"qualifiedName": "React.ReactElement",
								"package": "@types/react",
								"name": "ReactElement"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						388,
						273,
						275,
						372,
						391,
						274,
						384,
						300,
						336,
						276,
						350,
						378,
						292,
						280,
						281,
						282
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						286
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/layout/src/types.ts",
					"line": 92,
					"character": 17
				}
			]
		},
		{
			"id": 167,
			"name": "MenuItemProps",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"children": [
				{
					"id": 170,
					"name": "className",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 10,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 175,
					"name": "divider",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 15,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 171,
					"name": "icon",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 11,
							"character": 2
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									},
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"qualifiedName": "React.JSXElementConstructor",
												"package": "@types/react",
												"name": "JSXElementConstructor"
											}
										]
									}
								],
								"qualifiedName": "React.ReactElement",
								"package": "@types/react",
								"name": "ReactElement"
							}
						]
					}
				},
				{
					"id": 176,
					"name": "isExpandButton",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 16,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 168,
					"name": "label",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 8,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 178,
					"name": "liAttributes",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 18,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "object"
					}
				},
				{
					"id": 177,
					"name": "megamenu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 17,
							"character": 2
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "any"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"qualifiedName": "React.JSXElementConstructor",
										"package": "@types/react",
										"name": "JSXElementConstructor"
									}
								]
							}
						],
						"qualifiedName": "React.ReactElement",
						"package": "@types/react",
						"name": "ReactElement"
					}
				},
				{
					"id": 172,
					"name": "newTab",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 12,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 174,
					"name": "openNested",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 14,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 169,
					"name": "path",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 9,
							"character": 2
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 173,
					"name": "submenu",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
							"line": 13,
							"character": 2
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 167,
							"name": "MenuItemProps"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						170,
						175,
						171,
						176,
						168,
						178,
						177,
						172,
						174,
						169,
						173
					]
				}
			],
			"sources": [
				{
					"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
					"line": 7,
					"character": 17
				}
			]
		},
		{
			"id": 179,
			"name": "MakerMenu",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "`MakerMenu` is the menu structure for all menu-compatible Maker UI components. Create a\ndeeply nested array of menu items that include:",
				"tags": [
					{
						"tag": "param",
						"text": "The menu item label",
						"param": "label"
					},
					{
						"tag": "param",
						"text": "The relative path or off-site URL",
						"param": "path"
					},
					{
						"tag": "param",
						"text": "Custom class selectors for the menu item",
						"param": "className"
					},
					{
						"tag": "param",
						"text": "A React element to be rendered before the label",
						"param": "icon"
					},
					{
						"tag": "param",
						"text": "A boolean that specifies whether the link should open in a new tab",
						"param": "newTab"
					},
					{
						"tag": "param",
						"text": "A nested array of additional MenuItems",
						"param": "submenu"
					},
					{
						"tag": "param",
						"text": "A boolean that hides or displays the nested submenu\n",
						"param": "openNested"
					},
					{
						"tag": "example",
						"text": "\nconst menu: MakerMenu = [\n { label: 'Home', path: '/' },\n { label: 'About', path: '/about', submenu:\n   [\n     { label: 'Team', path: '/about/team' },\n     { label: 'History', path: '/about/history' },\n   ]\n },\n]\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Menu/MenuItem.tsx",
					"line": 45,
					"character": 12
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "reference",
					"id": 167,
					"name": "MenuItemProps"
				}
			}
		},
		{
			"id": 271,
			"name": "MakerUIOptions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Configuration for the Maker UI layout system.",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/maker-ui-options\n\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/layout/src/types.ts",
					"line": 82,
					"character": 12
				}
			],
			"type": {
				"type": "reference",
				"id": 269,
				"typeArguments": [
					{
						"type": "reference",
						"id": 272,
						"name": "MakerOptions"
					}
				],
				"name": "Partial"
			}
		},
		{
			"id": 269,
			"name": "Partial",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "A deeply nested partial that makes all props optional."
			},
			"sources": [
				{
					"fileName": "packages/layout/src/types.ts",
					"line": 13,
					"character": 12
				}
			],
			"typeParameter": [
				{
					"id": 270,
					"name": "T",
					"kind": 131072,
					"kindString": "Type parameter",
					"flags": {}
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "P",
				"parameterType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"id": 270,
						"name": "T"
					}
				},
				"templateType": {
					"type": "reference",
					"id": 269,
					"typeArguments": [
						{
							"type": "indexedAccess",
							"indexType": {
								"type": "reference",
								"name": "P"
							},
							"objectType": {
								"type": "reference",
								"id": 270,
								"name": "T"
							}
						}
					],
					"name": "Partial"
				},
				"optionalModifier": "+"
			}
		},
		{
			"id": 166,
			"name": "CollapsibleMenu",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "The `CollapsibleMenu` displays nested menus for the `SideNav` and `MobileMenu` components.\nMenu items with submenus will render a show/hide arrow button next to the item label.",
				"text": "Used as a default menu for `SideNav` and `MobileMenu` when child components\nare not included and you supply a menu prop.\n",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/layout/collapsible-menu\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Menu/CollapsibleMenu.tsx",
					"line": 29,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "CollapsibleProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"qualifiedName": "HTMLUListElement",
										"package": "typescript",
										"name": "HTMLUListElement"
									}
								],
								"qualifiedName": "React.RefAttributes",
								"package": "@types/react",
								"name": "RefAttributes"
							}
						]
					}
				],
				"qualifiedName": "React.ForwardRefExoticComponent",
				"package": "@types/react",
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 159,
			"name": "ColorButton",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Navbar/ColorButton.tsx",
					"line": 23,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 160,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 161,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								161
							]
						}
					],
					"signatures": [
						{
							"id": 162,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `ColorButton` is used by `Navbar` to show the current color mode and let you toggle\nto other color presets. You can also use this button anywhere within your layout.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/buttons/#colorButton\n"
									}
								]
							},
							"parameters": [
								{
									"id": 163,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ColorButtonProps"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 123,
			"name": "Content",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Content.tsx",
					"line": 25,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 124,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 125,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								125
							]
						}
					],
					"signatures": [
						{
							"id": 126,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Content` component is a wrapper that reads the contents of its\nchild nodes and updates the LayoutProvider for valid layouts or throws a development error.",
								"text": "Use it to wrap everything between your `Header` and `Footer` components.\n",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/content\n"
									}
								]
							},
							"parameters": [
								{
									"id": 127,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "ContentProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 151,
			"name": "Footer",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Footer.tsx",
					"line": 24,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 152,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 153,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								153
							]
						}
					],
					"signatures": [
						{
							"id": 154,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Footer` component stores important site information, links, and widgets at\nthe bottom of your layout.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/footer\n"
									}
								]
							},
							"parameters": [
								{
									"id": 155,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "FooterProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 108,
			"name": "Header",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Header.tsx",
					"line": 34,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 109,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 110,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								110
							]
						}
					],
					"signatures": [
						{
							"id": 111,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Header` component stores your site logo, primary menu, mobile menu,\nand any necessary navigation elements.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/header\n"
									}
								]
							},
							"parameters": [
								{
									"id": 112,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "HeaderProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 94,
			"name": "Layout",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Layout.tsx",
					"line": 41,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 95,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 96,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								96
							]
						}
					],
					"signatures": [
						{
							"id": 97,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Wrap your application in the `Layout` component to use Maker UI.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/layout\n"
									}
								]
							},
							"parameters": [
								{
									"id": 98,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "LayoutProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 130,
			"name": "Main",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Main.tsx",
					"line": 13,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 131,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 132,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								132
							]
						}
					],
					"signatures": [
						{
							"id": 133,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Main` component wraps your layout's main content.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/main\n"
									}
								]
							},
							"parameters": [
								{
									"id": 134,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "MainProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 122,
			"name": "MobileMenu",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "The `MobileMenu` component lets you customize a responsive overlay menu for mobile navigation.",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/layout/mobile-menu\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/MobileMenu.tsx",
					"line": 53,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "MobileMenuProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"qualifiedName": "HTMLDivElement",
										"package": "typescript",
										"name": "HTMLDivElement"
									}
								],
								"qualifiedName": "React.RefAttributes",
								"package": "@types/react",
								"name": "RefAttributes"
							}
						]
					}
				],
				"qualifiedName": "React.ForwardRefExoticComponent",
				"package": "@types/react",
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 115,
			"name": "Navbar",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Navbar/Navbar.tsx",
					"line": 56,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 116,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 117,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								117
							]
						}
					],
					"signatures": [
						{
							"id": 118,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Navbar` component renders your layout's primary navigation in one of\n8 common styles or you can fully customize it with the `navArea`, `logoArea`, and\n`menuArea` props.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/components/layout/navbar\n"
									}
								]
							},
							"parameters": [
								{
									"id": 119,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "NavProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 158,
			"name": "Section",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "The `Section` component creates new content sections that support full-width\nbackgrounds with custom max-width inner content.",
				"tags": [
					{
						"tag": "link",
						"text": "https://maker-ui.com/docs/layout/section\n"
					}
				]
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Section.tsx",
					"line": 21,
					"character": 13
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "SectionProps"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"qualifiedName": "HTMLElement",
										"package": "typescript",
										"name": "HTMLElement"
									}
								],
								"qualifiedName": "React.RefAttributes",
								"package": "@types/react",
								"name": "RefAttributes"
							}
						]
					}
				],
				"qualifiedName": "React.ForwardRefExoticComponent",
				"package": "@types/react",
				"name": "ForwardRefExoticComponent"
			},
			"defaultValue": "..."
		},
		{
			"id": 137,
			"name": "SideNav",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/SideNav.tsx",
					"line": 44,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 138,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 139,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								139
							]
						}
					],
					"signatures": [
						{
							"id": 140,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The **SideNav** component creates a side navigation panel as a sibling to the page's main\ncontent. It can be toggled open or closed on both desktop and mobile or it can serve as\nthe page's primary <header> tag.",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/sidenav\n"
									}
								]
							},
							"parameters": [
								{
									"id": 141,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "SideNavProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 144,
			"name": "Sidebar",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Sidebar.tsx",
					"line": 17,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 145,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 146,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								146
							]
						}
					],
					"signatures": [
						{
							"id": 147,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Sidebar` component shows complementary content alongside the `Main` component..",
								"tags": [
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/sidebar\n"
									}
								]
							},
							"parameters": [
								{
									"id": 148,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "SidebarProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 101,
			"name": "Topbar",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"sources": [
				{
					"fileName": "packages/layout/src/components/Topbar.tsx",
					"line": 41,
					"character": 13
				}
			],
			"type": {
				"type": "reflection",
				"declaration": {
					"id": 102,
					"name": "__type",
					"kind": 65536,
					"kindString": "Type literal",
					"flags": {},
					"children": [
						{
							"id": 103,
							"name": "displayName",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								103
							]
						}
					],
					"signatures": [
						{
							"id": 104,
							"name": "__type",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The `Topbar` component displays content like announcements, social media icons,\nor promotions above the page header.",
								"tags": [
									{
										"tag": "todo",
										"text": "- revisit hide on mobile / sticky style conflict\n"
									},
									{
										"tag": "link",
										"text": "https://maker-ui.com/docs/layout/topbar\n"
									}
								]
							},
							"parameters": [
								{
									"id": 105,
									"name": "props",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TopbarProps"
									}
								}
							],
							"type": {
								"type": "reference",
								"qualifiedName": "global.JSX.Element",
								"package": "@types/react",
								"name": "Element"
							}
						}
					]
				}
			},
			"defaultValue": "..."
		},
		{
			"id": 31,
			"name": "generateId",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/utils/helper.ts",
					"line": 25,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 32,
					"name": "generateId",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a randomly generated alphanumeric ID.",
						"tags": [
							{
								"tag": "internal",
								"text": "usage only\n\n"
							}
						]
					},
					"parameters": [
						{
							"id": 33,
							"name": "length",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"defaultValue": "5"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			]
		},
		{
			"id": 40,
			"name": "merge",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/deepmerge/index.d.ts",
					"line": 1,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 41,
					"name": "merge",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"typeParameter": [
						{
							"id": 42,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExternal": true
							}
						}
					],
					"parameters": [
						{
							"id": 43,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 42,
										"qualifiedName": "T",
										"package": "deepmerge",
										"name": "T"
									}
								],
								"qualifiedName": "Partial",
								"package": "typescript",
								"name": "Partial"
							}
						},
						{
							"id": 44,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 42,
										"qualifiedName": "T",
										"package": "deepmerge",
										"name": "T"
									}
								],
								"qualifiedName": "Partial",
								"package": "typescript",
								"name": "Partial"
							}
						},
						{
							"id": 45,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"id": 61,
								"qualifiedName": "deepmerge.Options",
								"package": "deepmerge",
								"name": "Options"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 42,
						"qualifiedName": "T",
						"package": "deepmerge",
						"name": "T"
					}
				},
				{
					"id": 46,
					"name": "merge",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"typeParameter": [
						{
							"id": 47,
							"name": "T1",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExternal": true
							}
						},
						{
							"id": 48,
							"name": "T2",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExternal": true
							}
						}
					],
					"parameters": [
						{
							"id": 49,
							"name": "x",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 47,
										"qualifiedName": "T1",
										"package": "deepmerge",
										"name": "T1"
									}
								],
								"qualifiedName": "Partial",
								"package": "typescript",
								"name": "Partial"
							}
						},
						{
							"id": 50,
							"name": "y",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 48,
										"qualifiedName": "T2",
										"package": "deepmerge",
										"name": "T2"
									}
								],
								"qualifiedName": "Partial",
								"package": "typescript",
								"name": "Partial"
							}
						},
						{
							"id": 51,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"id": 61,
								"qualifiedName": "deepmerge.Options",
								"package": "deepmerge",
								"name": "Options"
							}
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"id": 47,
								"qualifiedName": "T1",
								"package": "deepmerge",
								"name": "T1"
							},
							{
								"type": "reference",
								"id": 48,
								"qualifiedName": "T2",
								"package": "deepmerge",
								"name": "T2"
							}
						]
					}
				}
			]
		},
		{
			"id": 34,
			"name": "mergeSelectors",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/utils/helper.ts",
					"line": 55,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 35,
					"name": "mergeSelectors",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns a formatted selector string for `id` or `className` attributes that\nmerges user generated classNames with MakerUI defaults."
					},
					"parameters": [
						{
							"id": 36,
							"name": "selectors",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "an array of classNames or ids supplied by component props.\nCan be dynamically generated\n\n"
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "intrinsic",
											"name": "string"
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "undefined"
							}
						]
					}
				}
			]
		},
		{
			"id": 22,
			"name": "useColorTheme",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/context/LayoutContext.tsx",
					"line": 282,
					"character": 9
				}
			],
			"signatures": [
				{
					"id": 23,
					"name": "useColorTheme",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 24,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 25,
									"name": "colorTheme",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 26,
									"name": "setColorTheme",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 27,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 28,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 29,
															"name": "theme",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 30,
									"name": "themes",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "string"
												}
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										25,
										26,
										30
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 37,
			"name": "useMeasure",
			"kind": 64,
			"kindString": "Function",
			"flags": {
				"isExternal": true
			},
			"sources": [
				{
					"fileName": "node_modules/react-use-measure/types/index.d.ts",
					"line": 34,
					"character": 17
				}
			],
			"signatures": [
				{
					"id": 38,
					"name": "useMeasure",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {
						"isExternal": true
					},
					"parameters": [
						{
							"id": 39,
							"name": "__namedParameters",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"type": {
								"type": "reference",
								"qualifiedName": "Options",
								"package": "react-use-measure",
								"name": "Options"
							}
						}
					],
					"type": {
						"type": "reference",
						"qualifiedName": "Result",
						"package": "react-use-measure",
						"name": "Result"
					}
				}
			]
		},
		{
			"id": 12,
			"name": "useMenu",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/context/ActionContext.tsx",
					"line": 69,
					"character": 9
				}
			],
			"signatures": [
				{
					"id": 13,
					"name": "useMenu",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the current state and a toggle function for the `MobileMenu`",
						"tags": [
							{
								"tag": "link",
								"text": "https://maker-ui.com/hooks/#useMenu\n"
							}
						]
					},
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 14,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/layout/src/context/ActionContext.tsx",
											"line": 69,
											"character": 30
										}
									],
									"signatures": [
										{
											"id": 15,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				}
			]
		},
		{
			"id": 20,
			"name": "useOptions",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/context/OptionContext.tsx",
					"line": 63,
					"character": 9
				}
			],
			"signatures": [
				{
					"id": 21,
					"name": "useOptions",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Retrieves the current Maker UI options configuration.",
						"tags": [
							{
								"tag": "link",
								"text": "https://maker-ui.com/hooks/#useOptions\n"
							}
						]
					},
					"type": {
						"type": "reference",
						"id": 272,
						"name": "MakerOptions"
					}
				}
			]
		},
		{
			"id": 1,
			"name": "useScrollPosition",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/hooks/useScrollPosition.ts",
					"line": 26,
					"character": 16
				}
			],
			"signatures": [
				{
					"id": 2,
					"name": "useScrollPosition",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "A browser hook that returns the user's current and previous scroll position via callback",
						"tags": [
							{
								"tag": "link",
								"text": "https://maker-ui.com/docs/hooks/#useScrollPosition\n\n"
							}
						]
					},
					"parameters": [
						{
							"id": 3,
							"name": "effect",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A callback function that shows the user's previous and current positions"
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 4,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 5,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 6,
													"name": "props",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 7,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 9,
																	"name": "currPos",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "packages/layout/src/hooks/useScrollPosition.ts",
																			"line": 27,
																			"character": 37
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																},
																{
																	"id": 8,
																	"name": "prevPos",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "packages/layout/src/hooks/useScrollPosition.ts",
																			"line": 27,
																			"character": 20
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		9,
																		8
																	]
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						},
						{
							"id": 10,
							"name": "wait",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "The timeout delay for obtaining new position values"
							},
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 11,
							"name": "active",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"shortText": "A boolean that determines if the effect should be run\n"
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 16,
			"name": "useSideNav",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "packages/layout/src/context/ActionContext.tsx",
					"line": 90,
					"character": 9
				}
			],
			"signatures": [
				{
					"id": 17,
					"name": "useSideNav",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Returns the current state and a toggle function for the `SideNav`",
						"tags": [
							{
								"tag": "link",
								"text": "https://maker-ui.com/hooks/#useSideNav\n"
							}
						]
					},
					"type": {
						"type": "tuple",
						"elements": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 18,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "packages/layout/src/context/ActionContext.tsx",
											"line": 90,
											"character": 33
										}
									],
									"signatures": [
										{
											"id": 19,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							}
						]
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Namespaces",
			"kind": 4,
			"children": [
				164,
				128,
				156,
				113,
				99,
				135,
				120,
				142,
				149,
				106,
				52
			]
		},
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				180,
				79
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				272,
				167
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				179,
				271,
				269
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				166,
				159,
				123,
				151,
				108,
				94,
				130,
				122,
				115,
				158,
				137,
				144,
				101
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				31,
				40,
				34,
				22,
				37,
				12,
				20,
				1,
				16
			]
		}
	],
	"sources": [
		{
			"fileName": "packages/layout/src/index.ts",
			"line": 1,
			"character": 0
		}
	]
}